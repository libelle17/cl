!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	Development	//
Abfrage	DB.h	/^      int Abfrage(sT psql,const size_t aktc\/*=0*\/,int obverb=0,uchar asy=0,int oblog=0,string *idp=0,my_ulonglong *arowsp=0){$/;"	f	class:RS
Abschn_auswert	kons.cpp	/^void confdat::Abschn_auswert(int obverb, const char tz)$/;"	f	class:confdat
B_Alle	kons.h	123;"	d
B_Block	kons.h	119;"	d
B_Chdev	kons.h	118;"	d
B_Datei	kons.h	116;"	d
B_FIFO	kons.h	120;"	d
B_Link	kons.h	121;"	d
B_Sock	kons.h	122;"	d
B_Verzn	kons.h	117;"	d
ConnError	DB.h	/^    const char* ConnError;$/;"	m	class:DB
DB	DB.cpp	/^\/*2*\/DB::DB(const DBSTyp nDBS, linst_cl *const linstp, const string& phost, const string& puser, const string& ppasswd, $/;"	f	class:DB
DB	DB.cpp	/^\/*3*\/DB::DB(const DBSTyp nDBS, linst_cl *const linstp, const char* const phost, const char* const puser,const char* const ppasswd, $/;"	f	class:DB
DB	DB.cpp	/^\/*4*\/DB::DB(const DBSTyp nDBS, linst_cl *const linstp, const char* const phost, const char* const puser,const char* const ppasswd, $/;"	f	class:DB
DB	DB.h	/^class DB $/;"	c
DBS	DB.h	/^    const DBSTyp DBS;$/;"	m	class:DB
DBSTyp	DB.h	/^enum DBSTyp {MySQL, Postgres};$/;"	g
DB_H_DRIN	DB.h	11;"	d
DB_T	DB.cpp	/^const char *DB_T[T_dbMAX+1][SprachZahl]={$/;"	v
DIRFEHLER	kons.h	/^  DIRFEHLER=998, $/;"	e	enum:__anon1
DPROG	cl.h	1;"	d
DPROG_T	cl.cpp	/^char const *DPROG_T[T_MAX+1][SprachZahl]={$/;"	v
Feld	DB.cpp	/^Feld::Feld()$/;"	f	class:Feld
Feld	DB.cpp	/^Feld::Feld(const string& name, string typ\/*=""*\/, const string& lenge\/*=""*\/, const string& prec\/*=""*\/, $/;"	f	class:Feld
Feld	DB.h	/^class Feld $/;"	c
Fol_Dat	kons.h	124;"	d
Fol_Mus	kons.h	126;"	d
Fol_Ver	kons.h	125;"	d
HolZeile	DB.cpp	/^char*** RS::HolZeile() $/;"	f	class:RS
Index	DB.cpp	/^Index::Index(const string& name, Feld *felder, int feldzahl) :$/;"	f	class:Index
Index	DB.h	/^class Index $/;"	c
LetzteID	DB.cpp	/^void DB::LetzteID(string *erg,const size_t aktc) $/;"	f	class:DB
Log	kons.cpp	/^int Log(const short screen,const short file, const bool oberr,const short klobverb, const char *format, ...)$/;"	f
Log	kons.cpp	/^int Log(const string& text, const short screen\/*=1*\/, const short file\/*=1*\/, const bool oberr\/*=0*\/, const short klobverb\/*=0*\/)$/;"	f
Log	kons.cpp	/^int hcl::Log(const string& text,const bool oberr\/*=0*\/,const short klobverb\/*=0*\/) const$/;"	f	class:hcl
MusterVorgb	cl.cpp	/^void hhcl::MusterVorgb()$/;"	f	class:hhcl
My	cl.h	/^	DB* My=0;$/;"	m	class:hhcl
MySQL	DB.h	/^enum DBSTyp {MySQL, Postgres};$/;"	e	enum:DBSTyp
PATH_MAX	kons.h	53;"	d
PATH_MAX	kons.h	57;"	d
Postgres	DB.h	/^enum DBSTyp {MySQL, Postgres};$/;"	e	enum:DBSTyp
REALPATHFEHLER	kons.h	/^  REALPATHFEHLER=999$/;"	e	enum:__anon1
REGFEHLER	kons.h	/^  REGFEHLER=997,$/;"	e	enum:__anon1
RS	DB.cpp	/^RS::RS(const DB* pdb) $/;"	f	class:RS
RS	DB.cpp	/^RS::RS(const DB* pdb,const char* const psql,const size_t aktc,int obverb) $/;"	f	class:RS
RS	DB.cpp	/^RS::RS(const DB* pdb,const string& psql,const size_t aktc,int obverb) $/;"	f	class:RS
RS	DB.cpp	/^RS::RS(const DB* pdb,stringstream psqls,const size_t aktc,int obverb) $/;"	f	class:RS
RS	DB.h	/^class RS $/;"	c
Schluessel	kons.h	/^class Schluessel {$/;"	c
Schschreib	kons.cpp	/^int Schschreib(const char *fname, Schluessel *conf, size_t csize)$/;"	f
SprachZahl	kons.h	/^enum Sprache {deutsch,englisch,SprachZahl};$/;"	e	enum:Sprache
Sprache	kons.h	/^enum Sprache {deutsch,englisch,SprachZahl};$/;"	g
TCp	kons.h	/^  const char * const * const * const *TCp;$/;"	m	class:TxB
TCtp	kons.h	/^typedef const char * const * const TCtp[SprachZahl];$/;"	t
T_	cl.cpp	/^enum T_      $/;"	g	file:
T_Aendere_Feld	DB.h	/^  T_Aendere_Feld,$/;"	e	enum:Txdb_
T_Aktiviere_Dienst	kons.h	/^  T_Aktiviere_Dienst,$/;"	e	enum:Tkons_
T_Alle_wieviel_Minuten_soll	cl.cpp	/^	T_Alle_wieviel_Minuten_soll,$/;"	e	enum:T_	file:
T_Aufrufintervall	cl.cpp	/^	T_Aufrufintervall,$/;"	e	enum:T_	file:
T_Benutzer	kons.h	/^	T_Benutzer,$/;"	e	enum:Tkons_
T_Benutzer_fuer_MySQL_MariaDB	cl.cpp	/^	T_Benutzer_fuer_MySQL_MariaDB,$/;"	e	enum:T_	file:
T_Bildschirmausgabe_gespraechiger	kons.h	/^	T_Bildschirmausgabe_gespraechiger,$/;"	e	enum:Tkons_
T_Bildschirmausgabe_mit_SQL_Befehlen	cl.cpp	/^	T_Bildschirmausgabe_mit_SQL_Befehlen,$/;"	e	enum:T_	file:
T_Bitte_geben_Sie_ein_MySQL_Passwort_fuer_Benutzer_root_ein	DB.h	/^  T_Bitte_geben_Sie_ein_MySQL_Passwort_fuer_Benutzer_root_ein,$/;"	e	enum:Txdb_
T_Bitte_geben_Sie_ein_Passwort_fuer_Benutzer_postgres_ein	DB.h	/^	T_Bitte_geben_Sie_ein_Passwort_fuer_Benutzer_postgres_ein,$/;"	e	enum:Txdb_
T_Bitte_mit	kons.h	/^  T_Bitte_mit,$/;"	e	enum:Tkons_
T_Breche_ab	cl.cpp	/^	T_Breche_ab,$/;"	e	enum:T_	file:
T_DB_wird_initialisiert	DB.h	/^  T_DB_wird_initialisiert,$/;"	e	enum:Txdb_
T_Datei	kons.h	/^	T_Datei,$/;"	e	enum:Tkons_
T_Datenbank_nicht_zu_oeffnen	DB.h	/^  T_Datenbank_nicht_zu_oeffnen,$/;"	e	enum:Txdb_
T_Datenbankbenutzer_leer	DB.h	/^	T_Datenbankbenutzer_leer,$/;"	e	enum:Txdb_
T_Datenbankname_fuer_MySQL_MariaDB_auf	cl.cpp	/^	T_Datenbankname_fuer_MySQL_MariaDB_auf,$/;"	e	enum:T_	file:
T_Datum_nicht_gesetzt_bei	kons.h	/^  T_Datum_nicht_gesetzt_bei,$/;"	e	enum:Tkons_
T_Dauer	kons.h	/^  T_Dauer,$/;"	e	enum:Tkons_
T_Dienst	kons.h	/^  T_Dienst,$/;"	e	enum:Tkons_
T_Dienst_disabled	kons.h	/^	T_Dienst_disabled,$/;"	e	enum:Tkons_
T_Dienst_inexistent	kons.h	/^	T_Dienst_inexistent,$/;"	e	enum:Tkons_
T_Dienst_kann_gestartet_werden	kons.h	/^	T_Dienst_kann_gestartet_werden,$/;"	e	enum:Tkons_
T_Dienst_laeuft	kons.h	/^	T_Dienst_laeuft,$/;"	e	enum:Tkons_
T_Dienst_laeuft_noch_aber_Dienstdatei_inexistent	kons.h	/^	T_Dienst_laeuft_noch_aber_Dienstdatei_inexistent,$/;"	e	enum:Tkons_
T_Dienstdateiname_nicht_ermittelbar	kons.h	/^	T_Dienstdateiname_nicht_ermittelbar,$/;"	e	enum:Tkons_
T_Ende	kons.h	/^	T_Ende,$/;"	e	enum:Tkons_
T_Ende_Gelaende	DB.h	/^	T_Ende_Gelaende,$/;"	e	enum:Txdb_
T_Erfolg	kons.h	/^  T_Erfolg,$/;"	e	enum:Tkons_
T_Erfolg_beim_Initialisieren_der_Verbindung_zu_mysql	DB.h	/^  T_Erfolg_beim_Initialisieren_der_Verbindung_zu_mysql,$/;"	e	enum:Txdb_
T_Erg	kons.h	/^	T_Erg,$/;"	e	enum:Tkons_
T_Ergebnis	kons.h	/^	T_Ergebnis,$/;"	e	enum:Tkons_
T_Ergebnis_Dienst	kons.h	/^	T_Ergebnis_Dienst,$/;"	e	enum:Tkons_
T_Ergebnis_nach_make	kons.h	/^	T_Ergebnis_nach_make,$/;"	e	enum:Tkons_
T_Ergebnis_nach_make_install	kons.h	/^	T_Ergebnis_nach_make_install,$/;"	e	enum:Tkons_
T_Erklaerung_aller_Optionen	cl.cpp	/^	T_Erklaerung_aller_Optionen,$/;"	e	enum:T_	file:
T_Erklaerung_haeufiger_Optionen	cl.cpp	/^	T_Erklaerung_haeufiger_Optionen,$/;"	e	enum:T_	file:
T_Erweitere_Feld	DB.h	/^  T_Erweitere_Feld,$/;"	e	enum:Txdb_
T_Exec_Datei_fehlt	kons.h	/^	T_Exec_Datei_fehlt,$/;"	e	enum:Tkons_
T_Exec_Dateiname_nicht_ermittelbar	kons.h	/^	T_Exec_Dateiname_nicht_ermittelbar,$/;"	e	enum:Tkons_
T_Exitcode	kons.h	/^	T_Exitcode,$/;"	e	enum:Tkons_
T_Fehlender	kons.h	/^  T_Fehlender,$/;"	e	enum:Tkons_
T_Fehlender_Parameter_string_zu	kons.h	/^  T_Fehlender_Parameter_string_zu,$/;"	e	enum:Tkons_
T_Fehler	kons.h	/^  T_Fehler,$/;"	e	enum:Tkons_
T_Fehler_Parameter	kons.h	/^  T_Fehler_Parameter,$/;"	e	enum:Tkons_
T_Fehler_bei_auswert	kons.h	/^  T_Fehler_bei_auswert,$/;"	e	enum:Tkons_
T_Fehler_bei_lstat	kons.h	/^  T_Fehler_bei_lstat,$/;"	e	enum:Tkons_
T_Fehler_beim_Deferenzieren_von	kons.h	/^	T_Fehler_beim_Deferenzieren_von,$/;"	e	enum:Tkons_
T_Fehler_beim_Loeschen	kons.h	/^  T_Fehler_beim_Loeschen,$/;"	e	enum:Tkons_
T_Fehler_beim_Pruefen_auf_Vorhandensein_des_Datensatzes	DB.h	/^  T_Fehler_beim_Pruefen_auf_Vorhandensein_des_Datensatzes,$/;"	e	enum:Txdb_
T_Fehler_beim_Pruefen_von	cl.cpp	/^	T_Fehler_beim_Pruefen_von,$/;"	e	enum:T_	file:
T_Fehler_beim_Verbinden	DB.h	/^  T_Fehler_beim_Verbinden,$/;"	e	enum:Txdb_
T_Fehler_db	DB.h	/^  T_Fehler_db,$/;"	e	enum:Txdb_
T_Fehler_dp	DB.h	/^  T_Fehler_dp,$/;"	e	enum:Txdb_
T_Fertig_mit	kons.h	/^	T_Fertig_mit,$/;"	e	enum:Tkons_
T_Fertig_mit_Parsen_der_Befehlszeile	kons.h	/^	T_Fertig_mit_Parsen_der_Befehlszeile,$/;"	e	enum:Tkons_
T_Firewallport	kons.h	/^	T_Firewallport,$/;"	e	enum:Tkons_
T_Folge	kons.h	/^	T_Folge,$/;"	e	enum:Tkons_
T_Freie_Software	kons.h	/^	T_Freie_Software,$/;"	e	enum:Tkons_
T_Fuege_ein	cl.cpp	/^	T_Fuege_ein, \/\/Ï‰$/;"	e	enum:T_	file:
T_Fuehre_aus	kons.h	/^  T_Fuehre_aus,$/;"	e	enum:Tkons_
T_Fuehre_aus_db	DB.h	/^  T_Fuehre_aus_db,$/;"	e	enum:Txdb_
T_Fuehrte_aus	kons.h	/^  T_Fuehrte_aus,$/;"	e	enum:Tkons_
T_Gebrauch	kons.h	/^	T_Gebrauch,$/;"	e	enum:Tkons_
T_Hilfe	kons.h	/^	T_Hilfe,$/;"	e	enum:Tkons_
T_Host_fuer_MySQL_MariaDB_Datenbank	cl.cpp	/^	T_Host_fuer_MySQL_MariaDB_Datenbank,$/;"	e	enum:T_	file:
T_Ins_Deinstallationsprogramm_wird_eingetragen	kons.h	/^	T_Ins_Deinstallationsprogramm_wird_eingetragen,$/;"	e	enum:Tkons_
T_Installationsverzeichnis	kons.h	/^	T_Installationsverzeichnis,$/;"	e	enum:Tkons_
T_Kann_Datei	kons.h	/^  T_Kann_Datei,$/;"	e	enum:Tkons_
T_Kein_cron_gesetzt_nicht_zu_setzen	kons.h	/^	T_Kein_cron_gesetzt_nicht_zu_setzen,$/;"	e	enum:Tkons_
T_Kompiliert	kons.h	/^	T_Kompiliert,$/;"	e	enum:Tkons_
T_Konfiguration_fuer	kons.h	/^  T_Konfiguration_fuer,$/;"	e	enum:Tkons_
T_Konfigurations_u_Logdatei_bearbeiten_sehen	cl.cpp	/^	T_Konfigurations_u_Logdatei_bearbeiten_sehen,$/;"	e	enum:T_	file:
T_Konnte_Datei	kons.h	/^  T_Konnte_Datei,$/;"	e	enum:Tkons_
T_Konnte_regulaeren_Ausdruck_nicht_kompilieren	kons.h	/^	T_Konnte_regulaeren_Ausdruck_nicht_kompilieren,$/;"	e	enum:Tkons_
T_Lese_Konfiguration_aus	kons.h	/^  T_Lese_Konfiguration_aus,$/;"	e	enum:Tkons_
T_Lesespalten	DB.h	/^  T_Lesespalten,$/;"	e	enum:Txdb_
T_Letzte_Programmaenderung	kons.h	/^	T_Letzte_Programmaenderung,$/;"	e	enum:Tkons_
T_Libtiff_Version	kons.h	/^	T_Libtiff_Version,$/;"	e	enum:Tkons_
T_Linkverzeichnis	kons.h	/^	T_Linkverzeichnis,$/;"	e	enum:Tkons_
T_Loesche_Ausrufezeichen	kons.h	/^  T_Loesche_Ausrufezeichen,$/;"	e	enum:Tkons_
T_Logdatei	kons.h	/^  T_Logdatei,$/;"	e	enum:Tkons_
T_Logdateidpp	kons.h	/^  T_Logdateidpp,$/;"	e	enum:Tkons_
T_Logdateiname	cl.cpp	/^	T_Logdateiname,$/;"	e	enum:T_	file:
T_Logpfad	cl.cpp	/^	T_Logpfad,$/;"	e	enum:T_	file:
T_Logverzeichnis	cl.cpp	/^	T_Logverzeichnis,$/;"	e	enum:T_	file:
T_MAX	cl.cpp	/^	T_MAX \/\/Î±$/;"	e	enum:T_	file:
T_Minute	cl.cpp	/^	T_Minute,$/;"	e	enum:T_	file:
T_Minuten	kons.h	/^	T_Minuten,$/;"	e	enum:Tkons_
T_Muss_Datei	kons.h	/^  T_Muss_Datei,$/;"	e	enum:Tkons_
T_MusterVorgb	cl.cpp	/^	T_MusterVorgb,$/;"	e	enum:T_	file:
T_MySQL_Passwort	DB.h	/^	T_MySQL_Passwort,$/;"	e	enum:Txdb_
T_MySQL_erfolgreich_gestartet	DB.h	/^  T_MySQL_erfolgreich_gestartet,$/;"	e	enum:Txdb_
T_Nicht_numerischer	kons.h	/^  T_Nicht_numerischer,$/;"	e	enum:Tkons_
T_Oblog	cl.cpp	/^	T_Oblog,$/;"	e	enum:T_	file:
T_Optionen_die_in_der_Konfigurationsdatei_gespeichert_werden	kons.h	/^	T_Optionen_die_in_der_Konfigurationsdatei_gespeichert_werden,$/;"	e	enum:Tkons_
T_Optionen_die_nicht_gespeichert_werden	kons.h	/^	T_Optionen_die_nicht_gespeichert_werden,$/;"	e	enum:Tkons_
T_Parameter_nr_zu	kons.h	/^  T_Parameter_nr_zu,$/;"	e	enum:Tkons_
T_Passwort_fuer_MySQL_MariaDB	cl.cpp	/^	T_Passwort_fuer_MySQL_MariaDB,$/;"	e	enum:T_	file:
T_Passwort_fuer_samba	kons.h	/^	T_Passwort_fuer_samba,$/;"	e	enum:Tkons_
T_Pfad_angegeben	kons.h	/^  T_Pfad_angegeben,$/;"	e	enum:Tkons_
T_PostgreSQL_musste_neu_eingerichtet_werden	DB.h	/^	T_PostgreSQL_musste_neu_eingerichtet_werden,$/;"	e	enum:Txdb_
T_Program	kons.h	/^  T_Program,$/;"	e	enum:Tkons_
T_Programm	kons.h	/^	T_Programm,$/;"	e	enum:Tkons_
T_Programm_automatisch_aktualisieren	cl.cpp	/^	T_Programm_automatisch_aktualisieren,$/;"	e	enum:T_	file:
T_Pruefe_Tabelle	DB.h	/^  T_Pruefe_Tabelle,$/;"	e	enum:Txdb_
T_Quelle	kons.h	/^	T_Quelle,$/;"	e	enum:Tkons_
T_Rueckmeldung	kons.h	/^  T_Rueckmeldung,$/;"	e	enum:Tkons_
T_Samba_muesste_installiert_werden_soll_ich	kons.h	/^	T_Samba_muesste_installiert_werden_soll_ich,$/;"	e	enum:Tkons_
T_Soll_die_SuSEfirewall_bearbeitet_werden	kons.h	/^	T_Soll_die_SuSEfirewall_bearbeitet_werden,$/;"	e	enum:Tkons_
T_Sollen_fehlende_Sambafreigaben_fuer_die_angegebenen_Verzeichnisse_ergaenzt_werden	kons.h	/^	T_Sollen_fehlende_Sambafreigaben_fuer_die_angegebenen_Verzeichnisse_ergaenzt_werden,$/;"	e	enum:Tkons_
T_Sollen_neue_Programmversionen_von	cl.cpp	/^	T_Sollen_neue_Programmversionen_von,$/;"	e	enum:T_	file:
T_Sonstiges	kons.h	/^	T_Sonstiges,$/;"	e	enum:Tkons_
T_Suchbefehl	kons.h	/^  T_Suchbefehl,$/;"	e	enum:Tkons_
T_Suche_in	kons.h	/^	T_Suche_in,$/;"	e	enum:Tkons_
T_Tabellenname_in	cl.cpp	/^	T_Tabellenname_in,$/;"	e	enum:T_	file:
T_Testaufruf_wegen_Programmbibliotheken	kons.h	/^	T_Testaufruf_wegen_Programmbibliotheken,$/;"	e	enum:Tkons_
T_Tiefe	kons.h	/^	T_Tiefe,$/;"	e	enum:Tkons_
T_Typbit	kons.h	/^	T_Typbit,$/;"	e	enum:Tkons_
T_Variable_logdatei_Verzeichnis	kons.h	/^	T_Variable_logdatei_Verzeichnis,$/;"	e	enum:Tkons_
T_Variable_logdatei_leer	kons.h	/^  T_Variable_logdatei_leer,$/;"	e	enum:Tkons_
T_Verbindung_zu	DB.h	/^	T_Verbindung_zu,$/;"	e	enum:Txdb_
T_Verfasser	kons.h	/^	T_Verfasser,$/;"	e	enum:Tkons_
T_Versuch	kons.h	/^  T_Versuch,$/;"	e	enum:Tkons_
T_Versuch_Nr	DB.h	/^	T_Versuch_Nr,$/;"	e	enum:Txdb_
T_Versuche_Datenbank	DB.h	/^  T_Versuche_Datenbank,$/;"	e	enum:Txdb_
T_Versuche_mysql_zu_starten	DB.h	/^  T_Versuche_mysql_zu_starten,$/;"	e	enum:Txdb_
T_Verzeichnis	kons.h	/^	T_Verzeichnis,$/;"	e	enum:Tkons_
T_Vor_restart	DB.h	/^	T_Vor_restart,$/;"	e	enum:Txdb_
T_VorgbAllg	cl.cpp	/^	T_VorgbAllg,$/;"	e	enum:T_	file:
T_VorgbSpeziell	cl.cpp	/^	T_VorgbSpeziell,$/;"	e	enum:T_	file:
T_Weder_zypper_noch_apt_get_noch_dnf_noch_yum_als_Installationspgrogramm_gefunden	kons.h	/^  T_Weder_zypper_noch_apt_get_noch_dnf_noch_yum_als_Installationspgrogramm_gefunden,$/;"	e	enum:Tkons_
T_Welches_Passwort_soll_der_Benutzer_postgres_haben	DB.h	/^	T_Welches_Passwort_soll_der_Benutzer_postgres_haben,$/;"	e	enum:Txdb_
T_Wert	kons.h	/^  T_Wert,$/;"	e	enum:Tkons_
T_Zeigt_die_Programmversion_an	cl.cpp	/^	T_Zeigt_die_Programmversion_an,$/;"	e	enum:T_	file:
T_Zeilen	kons.h	/^  T_Zeilen,$/;"	e	enum:Tkons_
T_Zeit_Doppelpunkt	kons.h	/^	T_Zeit_Doppelpunkt,$/;"	e	enum:Tkons_
T_activating	kons.h	/^	T_activating,$/;"	e	enum:Tkons_
T_aktuelle_Einstellungen_aus	kons.h	/^	T_aktuelle_Einstellungen_aus,$/;"	e	enum:Tkons_
T_alle	kons.h	/^	T_alle,$/;"	e	enum:Tkons_
T_alle_Parameter_werden_abgefragt_darunter_einige_hier_nicht_gezeigte	cl.cpp	/^	T_alle_Parameter_werden_abgefragt_darunter_einige_hier_nicht_gezeigte,$/;"	e	enum:T_	file:
T_als_Dienst_eingerichtet_von	kons.h	/^  T_als_Dienst_eingerichtet_von,$/;"	e	enum:Tkons_
T_am	kons.h	/^  T_am,$/;"	e	enum:Tkons_
T_auf	DB.h	/^  T_auf,$/;"	e	enum:Txdb_
T_aufgerufen	kons.h	/^	T_aufgerufen,$/;"	e	enum:Tkons_
T_aufgerufen_werden_0_ist_gar_nicht	cl.cpp	/^	T_aufgerufen_werden_0_ist_gar_nicht,$/;"	e	enum:T_	file:
T_autokonfschreib	cl.cpp	/^	T_autokonfschreib,$/;"	e	enum:T_	file:
T_automatisch_installiert_werden	cl.cpp	/^	T_automatisch_installiert_werden,$/;"	e	enum:T_	file:
T_autoupd_k	cl.cpp	/^	T_autoupd_k,$/;"	e	enum:T_	file:
T_autoupd_l	cl.cpp	/^	T_autoupd_l,$/;"	e	enum:T_	file:
T_beenden	kons.h	/^  T_beenden,$/;"	e	enum:Tkons_
T_bei	kons.h	/^	T_bei,$/;"	e	enum:Tkons_
T_bei_Abfrage	DB.h	/^  T_bei_Abfrage,$/;"	e	enum:Txdb_
T_bei_Befehl	DB.h	/^  T_bei_Befehl,$/;"	e	enum:Txdb_
T_bei_der_Abfrage_der_Spaltenlaenge_bei_Tabelle	DB.h	/^  T_bei_der_Abfrage_der_Spaltenlaenge_bei_Tabelle,$/;"	e	enum:Txdb_
T_bei_sql_Befehl	DB.h	/^	T_bei_sql_Befehl,$/;"	e	enum:Txdb_
T_beim_Initialisieren_von_MySQL	DB.h	/^  T_beim_Initialisieren_von_MySQL,$/;"	e	enum:Txdb_
T_belassen	kons.h	/^	T_belassen,$/;"	e	enum:Tkons_
T_cm_k	cl.cpp	/^	T_cm_k,$/;"	e	enum:T_	file:
T_confdat_lies_Datei	kons.h	/^	T_confdat_lies_Datei,$/;"	e	enum:Tkons_
T_confdat_lies_Erfolg	kons.h	/^	T_confdat_lies_Erfolg,$/;"	e	enum:Tkons_
T_confdat_lies_Misserfolg	kons.h	/^	T_confdat_lies_Misserfolg,$/;"	e	enum:Tkons_
T_cronminuten_l	cl.cpp	/^	T_cronminuten_l,$/;"	e	enum:T_	file:
T_cronzuplanen	kons.h	/^	T_cronzuplanen,$/;"	e	enum:Tkons_
T_datei	kons.h	/^	T_datei,$/;"	e	enum:Tkons_
T_datenbank_l	cl.cpp	/^	T_datenbank_l,$/;"	e	enum:T_	file:
T_dbMAX	DB.h	/^	T_dbMAX,$/;"	e	enum:Txdb_
T_db_k	cl.cpp	/^	T_db_k,$/;"	e	enum:T_	file:
T_doinst	kons.h	/^	T_doinst,$/;"	e	enum:Tkons_
T_eigene	kons.h	/^	T_eigene,$/;"	e	enum:Tkons_
T_enableggf	kons.h	/^	T_enableggf,$/;"	e	enum:Tkons_
T_entfernen	kons.h	/^	T_entfernen,$/;"	e	enum:Tkons_
T_erfolgreich_fuer	kons.h	/^	T_erfolgreich_fuer,$/;"	e	enum:Tkons_
T_ermoeglicht	kons.h	/^	T_ermoeglicht,$/;"	e	enum:Tkons_
T_erneute_Eingabe	kons.h	/^  T_erneute_Eingabe,$/;"	e	enum:Tkons_
T_erstellt_automatisch_durch_dieses_am	kons.h	/^  T_erstellt_automatisch_durch_dieses_am,$/;"	e	enum:Tkons_
T_fallsnichtda	kons.h	/^	T_fallsnichtda,$/;"	e	enum:Tkons_
T_falsche_Fehlernr	DB.h	/^  T_falsche_Fehlernr,$/;"	e	enum:Txdb_
T_fehlgeschlagen_bei	kons.h	/^  T_fehlgeschlagen_bei,$/;"	e	enum:Tkons_
T_fgz_k	cl.cpp	/^	T_fgz_k,$/;"	e	enum:T_	file:
T_fgz_l	cl.cpp	/^	T_fgz_l,$/;"	e	enum:T_	file:
T_fuer	kons.h	/^  T_fuer,$/;"	e	enum:Tkons_
T_fuer_Benutzer	kons.h	/^	T_fuer_Benutzer,$/;"	e	enum:Tkons_
T_gar_nicht	kons.h	/^	T_gar_nicht,$/;"	e	enum:Tkons_
T_geladen	kons.h	/^  T_geladen,$/;"	e	enum:Tkons_
T_gelungen	DB.h	/^	T_gelungen,$/;"	e	enum:Txdb_
T_gibt_es_noch_nicht_Kuerze_sie_daher_nicht	kons.h	/^  T_gibt_es_noch_nicht_Kuerze_sie_daher_nicht,$/;"	e	enum:Tkons_
T_h_k	cl.cpp	/^	T_h_k,$/;"	e	enum:T_	file:
T_hcl_hcl	kons.h	/^	T_hcl_hcl,$/;"	e	enum:Tkons_
T_hilfe_l	cl.cpp	/^	T_hilfe_l,$/;"	e	enum:T_	file:
T_holsystemsprache	kons.h	/^	T_holsystemsprache,$/;"	e	enum:Tkons_
T_host_k	cl.cpp	/^	T_host_k,$/;"	e	enum:T_	file:
T_host_l	cl.cpp	/^	T_host_l,$/;"	e	enum:T_	file:
T_info_k	cl.cpp	/^	T_info_k,$/;"	e	enum:T_	file:
T_ist_leer_Wollen_Sie_eines_festlegen	DB.h	/^  T_ist_leer_Wollen_Sie_eines_festlegen,$/;"	e	enum:Txdb_
T_j	DB.h	/^  T_j,$/;"	e	enum:Txdb_
T_j_af	kons.h	/^	T_j_af,$/;"	e	enum:Tkons_
T_j_k	kons.h	/^  T_j_k,$/;"	e	enum:Tkons_
T_ja	kons.h	/^	T_ja,$/;"	e	enum:Tkons_
T_kd_k	kons.h	/^	T_kd_k,$/;"	e	enum:Tkons_
T_kein_Aufruf	cl.cpp	/^	T_kein_Aufruf,$/;"	e	enum:T_	file:
T_kein_Verzeichnis_nochmal	kons.h	/^  T_kein_Verzeichnis_nochmal,$/;"	e	enum:Tkons_
T_keine_Rueckfragen_zB_aus_Cron	cl.cpp	/^	T_keine_Rueckfragen_zB_aus_Cron,$/;"	e	enum:T_	file:
T_keinerueckfragen_l	cl.cpp	/^	T_keinerueckfragen_l,$/;"	e	enum:T_	file:
T_komma_Ergebnis	kons.h	/^  T_komma_Ergebnis,$/;"	e	enum:Tkons_
T_konfdatei_l	kons.h	/^	T_konfdatei_l,$/;"	e	enum:Tkons_
T_konsMAX	kons.h	/^	T_konsMAX$/;"	e	enum:Tkons_
T_krf_k	cl.cpp	/^	T_krf_k,$/;"	e	enum:T_	file:
T_kuerze_logdatei	kons.h	/^  T_kuerze_logdatei,$/;"	e	enum:Tkons_
T_l_k	kons.h	/^	T_l_k,$/;"	e	enum:Tkons_
T_laeuft_jetzt	kons.h	/^	T_laeuft_jetzt,$/;"	e	enum:Tkons_
T_laeuft_schon_einmal_Breche_ab	kons.h	/^  T_laeuft_schon_einmal_Breche_ab,$/;"	e	enum:Tkons_
T_lang_k	kons.h	/^	T_lang_k,$/;"	e	enum:Tkons_
T_language_l	kons.h	/^	T_language_l,$/;"	e	enum:Tkons_
T_ld_k	kons.h	/^	T_ld_k,$/;"	e	enum:Tkons_
T_ldn_k	kons.h	/^	T_ldn_k,$/;"	e	enum:Tkons_
T_lg_k	kons.h	/^	T_lg_k,$/;"	e	enum:Tkons_
T_lh_k	cl.cpp	/^	T_lh_k,$/;"	e	enum:T_	file:
T_lhilfe_l	cl.cpp	/^	T_lhilfe_l,$/;"	e	enum:T_	file:
T_libtest	kons.h	/^	T_libtest,$/;"	e	enum:Tkons_
T_lief_schon	kons.h	/^  T_lief_schon,$/;"	e	enum:Tkons_
T_lieskonfein	kons.h	/^	T_lieskonfein,$/;"	e	enum:Tkons_
T_lingue_l	kons.h	/^	T_lingue_l,$/;"	e	enum:Tkons_
T_lista_k	cl.cpp	/^	T_lista_k,$/;"	e	enum:T_	file:
T_lista_l	cl.cpp	/^	T_lista_l,$/;"	e	enum:T_	file:
T_listet_Zeilen_auf	cl.cpp	/^	T_listet_Zeilen_auf,$/;"	e	enum:T_	file:
T_listet_n_Zeilen_auf_anstatt	cl.cpp	/^	T_listet_n_Zeilen_auf_anstatt,$/;"	e	enum:T_	file:
T_listz_k	cl.cpp	/^	T_listz_k,$/;"	e	enum:T_	file:
T_listz_l	cl.cpp	/^	T_listz_l,$/;"	e	enum:T_	file:
T_log_l	kons.h	/^	T_log_l,$/;"	e	enum:Tkons_
T_logdatei_string_im_Pfad	kons.h	/^	T_logdatei_string_im_Pfad,$/;"	e	enum:Tkons_
T_logdatei_vorher_loeschen	kons.h	/^	T_logdatei_vorher_loeschen,$/;"	e	enum:Tkons_
T_logdateineu_l	kons.h	/^	T_logdateineu_l,$/;"	e	enum:Tkons_
T_logdname_l	kons.h	/^	T_logdname_l,$/;"	e	enum:Tkons_
T_logvz_l	kons.h	/^	T_logvz_l,$/;"	e	enum:Tkons_
T_lvz_k	kons.h	/^	T_lvz_k,$/;"	e	enum:Tkons_
T_machfit	kons.h	/^  T_machfit,$/;"	e	enum:Tkons_
T_mit	DB.h	/^  T_mit,$/;"	e	enum:Txdb_
T_mit_Datei_als	kons.h	/^  T_mit_Datei_als,$/;"	e	enum:Tkons_
T_mit_falschem	kons.h	/^  T_mit_falschem,$/;"	e	enum:Tkons_
T_mpwd_k	cl.cpp	/^	T_mpwd_k,$/;"	e	enum:T_	file:
T_mpwd_l	cl.cpp	/^	T_mpwd_l,$/;"	e	enum:T_	file:
T_muser_k	cl.cpp	/^	T_muser_k,$/;"	e	enum:T_	file:
T_muser_l	cl.cpp	/^	T_muser_l,$/;"	e	enum:T_	file:
T_muss_nicht_aktualisiert_werden	kons.h	/^	T_muss_nicht_aktualisiert_werden,$/;"	e	enum:Tkons_
T_nach	kons.h	/^	T_nach,$/;"	e	enum:Tkons_
T_nein	kons.h	/^	T_nein,$/;"	e	enum:Tkons_
T_nicht_als_Sambafreigabe_gefunden_wird_ergaenzt_in	kons.h	/^	T_nicht_als_Sambafreigabe_gefunden_wird_ergaenzt_in,$/;"	e	enum:Tkons_
T_nicht_als_fstream_zum_Anhaengen_oeffnen	kons.h	/^  T_nicht_als_fstream_zum_Anhaengen_oeffnen,$/;"	e	enum:Tkons_
T_nicht_als_fstream_zum_Lesen_oeffnen	kons.h	/^  T_nicht_als_fstream_zum_Lesen_oeffnen,$/;"	e	enum:Tkons_
T_nicht_als_fstream_zum_Schreiben_oeffnen	kons.h	/^  T_nicht_als_fstream_zum_Schreiben_oeffnen,$/;"	e	enum:Tkons_
T_nicht_einfuegbar	kons.h	/^	T_nicht_einfuegbar,$/;"	e	enum:Tkons_
T_nicht_erkannt	cl.cpp	/^	T_nicht_erkannt,$/;"	e	enum:T_	file:
T_nicht_ermoeglicht	kons.h	/^	T_nicht_ermoeglicht,$/;"	e	enum:Tkons_
T_nicht_gefunden	kons.h	/^  T_nicht_gefunden,$/;"	e	enum:Tkons_
T_nicht_gefunden_soll_ich_es_erstellen	kons.h	/^  T_nicht_gefunden_soll_ich_es_erstellen,$/;"	e	enum:Tkons_
T_nicht_gefunden_versuche_ihn_einzurichten	kons.h	/^  T_nicht_gefunden_versuche_ihn_einzurichten,$/;"	e	enum:Tkons_
T_nicht_geladen	kons.h	/^  T_nicht_geladen,$/;"	e	enum:Tkons_
T_nicht_geloescht_war_eh_nicht_mehr_da	kons.h	/^  T_nicht_geloescht_war_eh_nicht_mehr_da,$/;"	e	enum:Tkons_
T_nicht_mit_fopen_zum_Anhaengen_oeffnen	kons.h	/^  T_nicht_mit_fopen_zum_Anhaengen_oeffnen,$/;"	e	enum:Tkons_
T_nicht_mit_fopen_zum_Lesen_oeffnen	kons.h	/^  T_nicht_mit_fopen_zum_Lesen_oeffnen,$/;"	e	enum:Tkons_
T_nicht_mit_fopen_zum_Schreiben_oeffnen	kons.h	/^  T_nicht_mit_fopen_zum_Schreiben_oeffnen,$/;"	e	enum:Tkons_
T_nicht_mit_open_zum_Anhaengen_oeffnen	kons.h	/^	T_nicht_mit_open_zum_Anhaengen_oeffnen,$/;"	e	enum:Tkons_
T_nicht_zum_Lesen_oeffnen	kons.h	/^  T_nicht_zum_Lesen_oeffnen,$/;"	e	enum:Tkons_
T_nicht_zum_Schreiben_oeffnen	kons.h	/^  T_nicht_zum_Schreiben_oeffnen,$/;"	e	enum:Tkons_
T_noext	kons.h	/^	T_noext,$/;"	e	enum:Tkons_
T_oblog	cl.cpp	/^	T_oblog,$/;"	e	enum:T_	file:
T_obsfveh	kons.h	/^	T_obsfveh,$/;"	e	enum:Tkons_
T_obunter	kons.h	/^	T_obunter,$/;"	e	enum:Tkons_
T_oder	kons.h	/^  T_oder,$/;"	e	enum:Tkons_
T_oder_nicht	kons.h	/^	T_oder_nicht,$/;"	e	enum:Tkons_
T_offen	kons.h	/^	T_offen,$/;"	e	enum:Tkons_
T_ohne_gueltigen	kons.h	/^  T_ohne_gueltigen,$/;"	e	enum:Tkons_
T_ohneabh	kons.h	/^	T_ohneabh,$/;"	e	enum:Tkons_
T_or	kons.h	/^	T_or,$/;"	e	enum:Tkons_
T_pfad	kons.h	/^  T_pfad,$/;"	e	enum:Tkons_
T_protokolliert_ausfuehrlich_in_Datei	kons.h	/^	T_protokolliert_ausfuehrlich_in_Datei,$/;"	e	enum:Tkons_
T_pruefDB	cl.cpp	/^	T_pruefDB,$/;"	e	enum:T_	file:
T_pruefberecht	kons.h	/^	T_pruefberecht,$/;"	e	enum:Tkons_
T_pruefcron	kons.h	/^	T_pruefcron,$/;"	e	enum:Tkons_
T_prueffunc	DB.h	/^	T_prueffunc,$/;"	e	enum:Txdb_
T_pruefpar	kons.h	/^  T_pruefpar,$/;"	e	enum:Tkons_
T_pruefsamba	kons.h	/^	T_pruefsamba,$/;"	e	enum:Tkons_
T_prueftif	kons.h	/^	T_prueftif,$/;"	e	enum:Tkons_
T_rf_k	cl.cpp	/^	T_rf_k,$/;"	e	enum:T_	file:
T_rueckfragen	cl.cpp	/^	T_rueckfragen,$/;"	e	enum:T_	file:
T_rueckfragen_l	cl.cpp	/^	T_rueckfragen_l,$/;"	e	enum:T_	file:
T_schlussanzeige	kons.h	/^	T_schlussanzeige,$/;"	e	enum:Tkons_
T_schreibe_Konfiguration	cl.cpp	/^	T_schreibe_Konfiguration,$/;"	e	enum:T_	file:
T_semodpruef	kons.h	/^	T_semodpruef,$/;"	e	enum:Tkons_
T_sh	kons.h	/^	T_sh,$/;"	e	enum:Tkons_
T_sonst_knapper	kons.h	/^	T_sonst_knapper,$/;"	e	enum:Tkons_
T_sprachstr	kons.h	/^	T_sprachstr,$/;"	e	enum:Tkons_
T_spruef_sname	kons.h	/^  T_spruef_sname,$/;"	e	enum:Tkons_
T_sql_verbose_l	cl.cpp	/^	T_sql_verbose_l,$/;"	e	enum:T_	file:
T_sqlv_k	cl.cpp	/^	T_sqlv_k,$/;"	e	enum:T_	file:
T_standardhilfe	kons.h	/^	T_standardhilfe,$/;"	e	enum:Tkons_
T_startundenable	kons.h	/^	T_startundenable,$/;"	e	enum:Tkons_
T_statt	kons.h	/^	T_statt,$/;"	e	enum:Tkons_
T_stern_zeile	kons.h	/^  T_stern_zeile,$/;"	e	enum:Tkons_
T_stopdis_sname	kons.h	/^	T_stopdis_sname,$/;"	e	enum:Tkons_
T_tabelle_l	cl.cpp	/^	T_tabelle_l,$/;"	e	enum:T_	file:
T_tb_k	cl.cpp	/^	T_tb_k,$/;"	e	enum:T_	file:
T_trenne	kons.h	/^	T_trenne,$/;"	e	enum:Tkons_
T_und_Feld	DB.h	/^  T_und_Feld,$/;"	e	enum:Txdb_
T_unveraendert	kons.h	/^	T_unveraendert,$/;"	e	enum:Tkons_
T_v_k	kons.h	/^	T_v_k,$/;"	e	enum:Tkons_
T_verbose_l	kons.h	/^	T_verbose_l,$/;"	e	enum:Tkons_
T_version_l	cl.cpp	/^	T_version_l,$/;"	e	enum:T_	file:
T_verwendet_Konfigurationsdatei_string_anstatt	kons.h	/^	T_verwendet_Konfigurationsdatei_string_anstatt,$/;"	e	enum:Tkons_
T_verwendet_die_Datenbank_auf_Host_string_anstatt_auf	cl.cpp	/^	T_verwendet_die_Datenbank_auf_Host_string_anstatt_auf,$/;"	e	enum:T_	file:
T_verwendet_die_Datenbank_string_anstatt	cl.cpp	/^	T_verwendet_die_Datenbank_string_anstatt,$/;"	e	enum:T_	file:
T_verwendet_die_Tabelle_string_anstatt	cl.cpp	/^	T_verwendet_die_Tabelle_string_anstatt,$/;"	e	enum:T_	file:
T_verwendet_fuer_MySQL_MariaDB_das_Passwort_string	cl.cpp	/^	T_verwendet_fuer_MySQL_MariaDB_das_Passwort_string,$/;"	e	enum:T_	file:
T_verwendet_fuer_MySQL_MariaDB_den_Benutzer_string_anstatt	cl.cpp	/^	T_verwendet_fuer_MySQL_MariaDB_den_Benutzer_string_anstatt,$/;"	e	enum:T_	file:
T_vi_k	cl.cpp	/^	T_vi_k,$/;"	e	enum:T_	file:
T_vi_l	cl.cpp	/^	T_vi_l,$/;"	e	enum:T_	file:
T_von	DB.h	/^  T_von,$/;"	e	enum:Txdb_
T_waehlt_als_Logverzeichnis_pfad_derzeit	kons.h	/^	T_waehlt_als_Logverzeichnis_pfad_derzeit,$/;"	e	enum:Tkons_
T_warte	kons.h	/^	T_warte,$/;"	e	enum:Tkons_
T_wird	kons.h	/^	T_wird,$/;"	e	enum:Tkons_
T_wird_aktualisiert_bitte_ggf_neu_starten	kons.h	/^	T_wird_aktualisiert_bitte_ggf_neu_starten,$/;"	e	enum:Tkons_
T_wird_benoetigt_fuer_Befehl	DB.h	/^	T_wird_benoetigt_fuer_Befehl,$/;"	e	enum:Txdb_
T_wird_verwendet_anstatt	kons.h	/^	T_wird_verwendet_anstatt,$/;"	e	enum:Tkons_
T_zeigvers	cl.cpp	/^	T_zeigvers,$/;"	e	enum:T_	file:
T_zu	kons.h	/^	T_zu,$/;"	e	enum:Tkons_
T_zu_erstellen	DB.h	/^  T_zu_erstellen,$/;"	e	enum:Txdb_
T_zu_schreiben	cl.cpp	/^	T_zu_schreiben,$/;"	e	enum:T_	file:
T_zugreifbar_machen	kons.h	/^  T_zugreifbar_machen,$/;"	e	enum:Tkons_
Tabelle	DB.cpp	/^Tabelle::Tabelle(const DB* dbp,const std::string& tbname, Feld *vfelder, int vfeldzahl, Index *vindices, unsigned vindexzahl, $/;"	f	class:Tabelle
Tabelle	DB.cpp	/^Tabelle::Tabelle(const DB* dbp,const string& tbname,const size_t aktc,int obverb,int oblog): dbp(dbp),tbname(tbname)$/;"	f	class:Tabelle
Tabelle	DB.h	/^class Tabelle $/;"	c
Tippbuchst	kons.cpp	/^char Tippbuchst(const string& frage, const string& moegl,const char *berkl[], const char* erlaubt, const char *vorgabe) $/;"	f
Tippob	kons.cpp	/^uchar Tippob(const string& frage,const char *vorgabe) $/;"	f
Tippstr	kons.cpp	/^string Tippstr(const char *frage, const string *vorgabe,const uchar obnichtleer\/*=1*\/) $/;"	f
Tippstr	kons.cpp	/^string Tippstr(const string& frage, const string *vorgabe,const uchar obnichtleer\/*=1*\/) $/;"	f
Tippstrs	kons.cpp	/^string Tippstrs(const char *frage, char* moegl[], char *vorgabe\/*=0*\/)$/;"	f
Tippstrs	kons.cpp	/^string Tippstrs(const char *frage, vector<string> *moegl, string *vorgabe\/*=0*\/)$/;"	f
Tippverz	kons.cpp	/^string Tippverz(const char *frage,const string *vorgabe) $/;"	f
Tippzahl	kons.cpp	/^long Tippzahl(const string& frage,const long& vorgabe)$/;"	f
Tippzahl	kons.cpp	/^string Tippzahl(const char *frage, const char *vorgabe) $/;"	f
Tippzahl	kons.cpp	/^string Tippzahl(const char *frage, const string *vorgabe) $/;"	f
Tippzahl	kons.cpp	/^string Tippzahl(const string& frage, const string *vorgabe)$/;"	f
Tkons_	kons.h	/^enum Tkons_ $/;"	g
TxB	kons.h	/^	TxB(const char* const* const* const *TCp):TCp(TCp){}$/;"	f	class:TxB
TxB	kons.h	/^class TxB \/\/ Text-Basisklasse$/;"	c
TxBp	kons.h	/^    TxB *TxBp=0;$/;"	m	class:optcl
TxBp	kons.h	/^    TxB *TxBp=0;$/;"	m	class:optioncl
Txdb_	DB.h	/^enum Txdb_ $/;"	g
Txi	kons.h	/^    const long Txi=-1;$/;"	m	class:optioncl
Txi	kons.h	/^    long Txi=0;$/;"	m	class:optcl
Txi2	kons.h	/^    long Txi2=-1;$/;"	m	class:optcl
Txi2	kons.h	/^    long Txi2=-1;$/;"	m	class:optioncl
VOMHAUPTCODE	cl.cpp	6;"	d	file:
Verbindung_zur_Datenbank_nicht_herstellbar	cl.cpp	/^	Verbindung_zur_Datenbank_nicht_herstellbar,$/;"	e	enum:T_	file:
VerzeichnisGibts	kons.cpp	/^uchar VerzeichnisGibts(const char* vname)$/;"	f
VorgbAllg	cl.cpp	/^void hhcl::VorgbAllg()$/;"	f	class:hhcl
VorgbSpeziell	cl.cpp	/^void hhcl::VorgbSpeziell()$/;"	f	class:hhcl
XOR	kons.cpp	/^string XOR(const string& value, const string& key)$/;"	f
ZDB	cl.cpp	/^uchar ZDB=0; \/\/ fuer Zusatz-Debugging (SQL): ZDB 1, sonst: 0$/;"	v
_CRT_SECURE_NO_WARNINGS	DB.h	2;"	d
_CRT_SECURE_NO_WARNINGS	kons.h	2;"	d
_access	kons.cpp	32;"	d	file:
_blau	kons.cpp	/^const char *_drot=drot, *_rot=rot, *_schwarz=schwarz, *_blau=blau, *_gelb=gelb, *_tuerkis=tuerkis, *_hgrau=hgrau;$/;"	v
_blau	kons.h	/^inline std::ostream& _blau(std::ostream &s){$/;"	f	class:std
_drot	kons.cpp	/^const char *_drot=drot, *_rot=rot, *_schwarz=schwarz, *_blau=blau, *_gelb=gelb, *_tuerkis=tuerkis, *_hgrau=hgrau;$/;"	v
_drot	kons.h	/^inline std::ostream& _drot(std::ostream &s){$/;"	f	class:std
_gelb	kons.cpp	/^const char *_drot=drot, *_rot=rot, *_schwarz=schwarz, *_blau=blau, *_gelb=gelb, *_tuerkis=tuerkis, *_hgrau=hgrau;$/;"	v
_gelb	kons.h	/^inline std::ostream& _gelb(std::ostream &s){$/;"	f	class:std
_hgrau	kons.cpp	/^const char *_drot=drot, *_rot=rot, *_schwarz=schwarz, *_blau=blau, *_gelb=gelb, *_tuerkis=tuerkis, *_hgrau=hgrau;$/;"	v
_rot	kons.cpp	/^const char *_drot=drot, *_rot=rot, *_schwarz=schwarz, *_blau=blau, *_gelb=gelb, *_tuerkis=tuerkis, *_hgrau=hgrau;$/;"	v
_rot	kons.h	/^inline std::ostream& _rot(std::ostream &s){$/;"	f	class:std
_schwarz	kons.cpp	/^const char *_drot=drot, *_rot=rot, *_schwarz=schwarz, *_blau=blau, *_gelb=gelb, *_tuerkis=tuerkis, *_hgrau=hgrau;$/;"	v
_schwarz	kons.h	/^inline std::ostream& _schwarz(std::ostream &s){$/;"	f	class:std
_tuerkis	kons.cpp	/^const char *_drot=drot, *_rot=rot, *_schwarz=schwarz, *_blau=blau, *_gelb=gelb, *_tuerkis=tuerkis, *_hgrau=hgrau;$/;"	v
abSchl	kons.h	/^   abSchl(string& vname, string& vwert):name(vname),wert(vwert) {}$/;"	f	class:abSchl
abSchl	kons.h	/^class abSchl {$/;"	c
absch	kons.h	/^class absch$/;"	c
abschv	kons.h	/^    vector<absch> abschv;$/;"	m	class:confdat
afcd	kons.h	/^		confdat afcd;$/;"	m	class:hcl
affrows	DB.cpp	/^my_ulonglong DB::affrows(const size_t aktc) const$/;"	f	class:DB
agcnfA	kons.h	/^    schlArr agcnfA; \/\/ Gesamtkonfiguration$/;"	m	class:hcl
agef	kons.h	/^ uchar agef=0; \/\/ dieser wurde gefunden$/;"	m	class:argcl
akonfdt	kons.h	/^    string akonfdt; \/\/ name der Konfigurationsdatei$/;"	m	class:hcl
aktprogverz	kons.cpp	/^string aktprogverz()$/;"	f
altfind	kons.h	108;"	d
aname	kons.h	/^ string aname;$/;"	m	class:absch
anfgg	kons.cpp	/^void anfgg(const string& datei, const string& inhalt, const string& comment, int obverb\/*=0*\/, int oblog\/*=0*\/)$/;"	f
anfgw	kons.cpp	/^void anfgw(const string& datei, const string& udpr, const string& inhalt, const string& comment, int obverb\/*=0*\/, int oblog\/*=0*\/)$/;"	f
anfzweg	kons.cpp	/^string* anfzweg(string& quel) {$/;"	f
apt	kons.h	/^enum instprog {keinp,zypper,apt,dnf,yum,urp,pac};$/;"	e	enum:instprog
argcl	kons.cpp	/^argcl::argcl(const int i,const char *const *const argv):argcs(argv[i])$/;"	f	class:argcl
argcl	kons.h	/^class argcl$/;"	c
argcmv	kons.h	/^		vector<argcl> argcmv; \/\/ class member vector$/;"	m	class:hcl
argcs	kons.h	/^ const char *argcs;  \/\/ Zeiger auf einen Commandline-Parameter$/;"	m	class:argcl
art	kons.h	/^    const par_t art; \/\/ Parameterart$/;"	m	class:optioncl
art	kons.h	/^    par_t art=psons; \/\/ Parameterart$/;"	m	class:optcl
aschreib	kons.cpp	/^void schlArr::aschreib(mdatei *const f)$/;"	f	class:schlArr
attrangleich	kons.cpp	/^int attrangleich(const string& zu, const string& gemaess,const string* const zeitvondtp\/*=0*\/, int obverb\/*=0*\/, int oblog\/*=0*\/)$/;"	f
aufSplit	kons.cpp	/^void aufSplit(vector<string> *tokens, const char* const text, const char sep\/*=' '*\/,bool auchleer\/*=1*\/)$/;"	f
aufSplit	kons.cpp	/^void aufSplit(vector<string> *tokens, const string& text, const char sep\/*=' '*\/,bool auchleer\/*=1*\/)$/;"	f
aufSplit	kons.cpp	/^void aufSplit(vector<string> *tokens, const string& text, const char* const sep, bool auchleer\/*=1*\/)$/;"	f
aufiSplit	kons.cpp	/^void aufiSplit(vector<string> *tokens, const string& text, const string& sep,bool nichtmehrfach\/*=1*\/,int obverb\/*=0*\/,int oblog\/*=0*\/) $/;"	f
aufrufe	kons.h	/^		ulong aufrufe=0; \/\/ Zahl der bisherigen Programmaufrufe$/;"	m	class:hcl
ausgab1000	kons.cpp	/^void perfcl::ausgab1000(const string& stelle)$/;"	f	class:perfcl
ausgeb	kons.cpp	/^int find3cl::ausgeb()$/;"	f	class:find3cl
ausgeb	kons.cpp	/^void find2cl::ausgeb()$/;"	f	class:find2cl
ausgeb	kons.cpp	/^void perfcl::ausgeb(const string& stelle,uchar obdauer)$/;"	f	class:perfcl
ausgeb	kons.cpp	/^void schlArr::ausgeb()$/;"	f	class:schlArr
auswert	kons.cpp	/^void confdat::auswert(schlArr *sA, int obverb, const char tz)$/;"	f	class:confdat
autokonfschreib	cl.cpp	/^void hhcl::autokonfschreib()$/;"	f	class:hhcl
autoupd	kons.h	/^		uchar autoupd;  \/\/ 1=Programm automatisch updadaten$/;"	m	class:hcl
av	kons.h	/^ vector<abSchl> av;$/;"	m	class:absch
azaehlerdt	kons.h	/^		string azaehlerdt; \/\/ akonfdt+".zaehl"$/;"	m	class:hcl
base_name	kons.cpp	/^std::string base_name(const std::string& path)$/;"	f
bemerk	kons.h	/^    string bemerk;$/;"	m	class:cppSchluess
bemerkung	kons.h	/^    string bemerkung;$/;"	m	class:optioncl
bemerkung	kons.h	/^    string bemerkung="";$/;"	m	class:optcl
benutzer	kons.h	/^		vector<string> benutzer; \/\/ Benutzer aus \/etc\/passwd, bearbeitet durch setzbenutzer(&user)$/;"	m	class:hcl
betroffen	DB.h	/^		char **betroffen=0; \/\/ fuer Abfrage in postgres$/;"	m	class:RS
binaer	kons.h	/^enum binaer:uchar {falsch,wahr};$/;"	g
blau	kons.cpp	/^			*const dblau="\\e[0;34;1;47m", *const blau="\\e[1;34m", *const violett="\\e[0;35m", *const hviolett="\\e[1;35m",$/;"	v
blau	kons.cpp	/^const char *const drot="", *const rot="", *const schwarz="", *const blau="", *const gelb="", *const tuerkis="", *const hgrau="";$/;"	v
blaus	kons.cpp	/^const string drots=drot, rots=rot, schwarzs=schwarz, blaus=blau, dblaus=dblau, gelbs=gelb, tuerkiss=tuerkis, violetts=violett, gruens=gruen;$/;"	v
braun	kons.cpp	/^			*const gruen="\\e[0;32m", *const hgruen="\\e[1;32m", *const braun="\\e[0;33m", *const gelb="\\e[1;33m",$/;"	v
caseersetze	kons.cpp	/^string caseersetze(const string& u, const char* const alt, const char* const neu) $/;"	f
caup	DB.cpp	4;"	d	file:
caus	DB.cpp	3;"	d	file:
caus	kons.cpp	11;"	d	file:
caus	kons.h	134;"	d
cgid	kons.h	/^ gid_t cgid;$/;"	m	class:cuscl
charersetze	kons.cpp	/^char* charersetze(char *u, const char alt, const char neu) $/;"	f
charset	DB.h	/^		const string charset;$/;"	m	class:DB
charset	DB.h	/^    const string charset;$/;"	m	class:Tabelle
chersetze	kons.cpp	/^void chersetze(string str, string *wsRet, const string& from, const char to) $/;"	f
cjj	DB.cpp	/^const char *cjj(const char * const* const* cerg, const int nr)$/;"	f
cl	kons.h	/^		string cl; \/\/ comandline$/;"	m	class:hcl
clear	DB.cpp	/^void RS::clear()$/;"	f	class:RS
clear	kons.cpp	/^void absch::clear()$/;"	f	class:absch
cmd	DB.h	/^    string cmd;$/;"	m	class:DB
cmd	kons.h	/^    string cmd; \/\/ string fuer command fuer Betriebssystembefehle$/;"	m	class:hcl
cmeingegeben	kons.h	/^		uchar cmeingegeben=0; \/\/ cron-Minuten eingegeben$/;"	m	class:hcl
cmpmem	kons.cpp	/^long cmpmem( char* feld, const char* search, int len_feld) \/\/\/\/ , int len_search$/;"	f
collate	DB.h	/^		const string collate;$/;"	m	class:DB
collate	DB.h	/^    const string collate;$/;"	m	class:Tabelle
color	kons.h	/^  color(WORD attribute):m_color(attribute){};$/;"	f	struct:color
color	kons.h	/^struct color {$/;"	s
comment	DB.h	/^    string comment; \/\/ wird geaendert$/;"	m	class:Tabelle
comment	DB.h	/^    string comment;$/;"	m	class:Feld
compil	kons.h	/^ string compil; \/\/ Paketnamen fuer den Compiler$/;"	m	class:linst_cl
confdat	kons.cpp	/^confdat::confdat()$/;"	f	class:confdat
confdat	kons.cpp	/^confdat::confdat(const string& fname, schlArr *sA, int obverb, const char tz)$/;"	f	class:confdat
confdat	kons.cpp	/^confdat::confdat(const string& fname,int obverb):name(fname)$/;"	f	class:confdat
confdat	kons.h	/^class confdat$/;"	c
conn	DB.h	/^    MYSQL **conn;$/;"	m	class:DB
conz	DB.h	/^		size_t conz; \/\/ Zahl der Verbindungen (s.o., conn)$/;"	m	class:DB
cpA	kons.h	/^    schlArr *cpA=0; \/\/ Konfigurationsarray, das ggf. geschrieben werden muss$/;"	m	class:optcl
cpA	kons.h	/^    schlArr *cpA=0; \/\/ Konfigurationsarray, das ggf. geschrieben werden muss$/;"	m	class:optioncl
cppSchluess	kons.cpp	/^cppSchluess::cppSchluess(string name):name(name)$/;"	f	class:cppSchluess
cppSchluess	kons.h	/^class cppSchluess {$/;"	c
cppschreib	kons.cpp	/^int cppschreib(const string& fname, cppSchluess *conf, size_t csize)$/;"	f
crongeprueft	kons.h	/^		uchar crongeprueft=0;$/;"	m	class:hcl
cronminut	kons.h	/^    string cronminut; \/\/ Minuten fuer crontab; 0 = kein Crontab-Eintrag$/;"	m	class:hcl
cronzuplanen	kons.h	/^		uchar cronzuplanen;$/;"	m	class:hcl
cuid	kons.h	/^ uid_t cuid;$/;"	m	class:cuscl
cus	kons.cpp	/^cuscl cus;$/;"	v
cuscl	kons.cpp	/^cuscl::cuscl()$/;"	f	class:cuscl
cuscl	kons.h	/^class cuscl$/;"	c
cusstr	kons.h	/^ string cusstr;$/;"	m	class:cuscl
daemon_reload	kons.cpp	/^void servc::daemon_reload(int obverb\/*=0*\/, int oblog\/*=0*\/)$/;"	f	class:servc
datadir	DB.h	/^    string datadir;$/;"	m	class:DB
dateivgl	kons.cpp	/^int dateivgl(const string& d1, const string& d2,uchar obzeit\/*=0*\/)$/;"	f
db_systemctl_name	DB.h	/^    string db_systemctl_name; \/\/ mysql, mariadb je nach System$/;"	m	class:DB
dblau	kons.cpp	/^			*const dblau="\\e[0;34;1;47m", *const blau="\\e[1;34m", *const violett="\\e[0;35m", *const hviolett="\\e[1;35m",$/;"	v
dblaus	kons.cpp	/^const string drots=drot, rots=rot, schwarzs=schwarz, blaus=blau, dblaus=dblau, gelbs=gelb, tuerkiss=tuerkis, violetts=violett, gruens=gruen;$/;"	v
dbname	DB.h	/^		const string dbname;$/;"	m	class:Tabelle
dbname	DB.h	/^    const string dbname;$/;"	m	class:DB
dbp	DB.h	/^		const DB* dbp;$/;"	m	class:Tabelle
dbp	DB.h	/^    const DB* dbp;$/;"	m	class:RS
dbq	cl.h	/^	string dbq="faxe"; \/\/ Datenbank$/;"	m	class:hhcl
dbsv	DB.h	/^    servc *dbsv=0;$/;"	m	class:DB
deb	kons.h	/^enum lsysen:uchar {usys,sus,deb,fed};$/;"	e	enum:lsysen
defa	DB.h	/^    string defa;$/;"	m	class:Feld
defmycharset	DB.cpp	/^const string DB::defmycharset="utf8";$/;"	m	class:DB	file:
defmycharset	DB.h	/^		static const string defmycharset;$/;"	m	class:DB
defmycollat	DB.cpp	/^const string DB::defmycollat="utf8_unicode_ci";$/;"	m	class:DB	file:
defmycollat	DB.h	/^		static const string defmycollat;$/;"	m	class:DB
defmyengine	DB.cpp	/^const string DB::defmyengine="InnoDB";$/;"	m	class:DB	file:
defmyengine	DB.h	/^		static const string defmyengine;$/;"	m	class:DB
defmyrowform	DB.cpp	/^const string DB::defmyrowform="DYNAMIC";$/;"	m	class:DB	file:
defmyrowform	DB.h	/^		static const string defmyrowform;$/;"	m	class:DB
defnachs	kons.cpp	/^const string& defnachs="\/archive\/master.tar.gz";$/;"	v
defvors	kons.cpp	/^const string& defvors="https:\/\/github.com\/"+gitv+"\/";$/;"	v
dent	kons.h	/^  struct dirent *dent;$/;"	m	class:find2cl	typeref:struct:find2cl::
deutsch	kons.h	/^enum Sprache {deutsch,englisch,SprachZahl};$/;"	e	enum:Sprache
dev	kons.h	/^ string dev; \/\/ Anhaengsel fuer die development-Versionen ("-dev" oder "-devel")$/;"	m	class:linst_cl
devtty	kons.cpp	/^const string devtty=" >\/dev\/tty";$/;"	v
dgrau	kons.cpp	/^const char *const schwarz="\\e[0m", *const dgrau="\\e[1;30m", *const drot="\\e[0;31m", *const rot="\\e[1;31m",$/;"	v
dir	kons.cpp	/^const char *const dir = "dir ";$/;"	v
dir	kons.cpp	/^const char *const dir = "ls -l ";$/;"	v
dir	kons.h	/^  DIR *dir;$/;"	m	class:find2cl
dir_name	kons.cpp	/^std::string dir_name(const std::string& path)$/;"	f
dnb	DB.h	/^    char dnb; \/\/ delimiter name begin$/;"	m	class:DB
dnb	DB.h	/^inline char dnb(DBSTyp DBS) $/;"	f
dne	DB.h	/^    char dne; \/\/ delimiter name end$/;"	m	class:DB
dne	DB.h	/^inline char dne(DBSTyp DBS) $/;"	f
dnf	kons.h	/^enum instprog {keinp,zypper,apt,dnf,yum,urp,pac};$/;"	e	enum:instprog
doAbfrage	DB.cpp	/^int RS::doAbfrage(const size_t aktc\/*=0*\/,int obverb\/*=0*\/,uchar asy\/*=0*\/,int oblog\/*=0*\/,string *idp\/*=0*\/,my_ulonglong *arowsp\/*=0*\/)$/;"	f	class:RS
doanfg	kons.cpp	/^void doanfg(const string& datei, const string& inhalt, const string& comment)$/;"	f
dodovi	kons.cpp	/^void hcl::dodovi(const svec d1,const svec d2)$/;"	f	class:hcl
dofind	kons.cpp	/^int find3cl::dofind()$/;"	f	class:find3cl
doggfinst	kons.cpp	/^int linst_cl::doggfinst(const string& prog,int obverb,int oblog,uchar ohneabh\/*=0*\/)$/;"	f	class:linst_cl
doinst	kons.cpp	/^int linst_cl::doinst(const string& prog,int obverb\/*=0*\/,int oblog\/*=0*\/,const string& fallsnichtda\/*=nix*\/,uchar ohneabh\/*=0*\/)$/;"	f	class:linst_cl
douninst	kons.cpp	/^int linst_cl::douninst(const string& prog,int obverb\/*=0*\/,int oblog\/*=0*\/,uchar obyes\/*=1*\/) $/;"	f	class:linst_cl
dovi	kons.cpp	/^void hcl::dovi()$/;"	f	class:hcl
drot	kons.cpp	/^const char *const drot="", *const rot="", *const schwarz="", *const blau="", *const gelb="", *const tuerkis="", *const hgrau="";$/;"	v
drot	kons.cpp	/^const char *const schwarz="\\e[0m", *const dgrau="\\e[1;30m", *const drot="\\e[0;31m", *const rot="\\e[1;31m",$/;"	v
drots	kons.cpp	/^const string drots=drot, rots=rot, schwarzs=schwarz, blaus=blau, dblaus=dblau, gelbs=gelb, tuerkiss=tuerkis, violetts=violett, gruens=gruen;$/;"	v
druckeein	DB.cpp	/^void sqlft::druckeein(DBSTyp eDBS, tm* const zt) $/;"	f	class:sqlft
dst	kons.h	/^    struct stat dst={0};$/;"	m	class:elem2	typeref:struct:elem2::stat
dvb	DB.h	/^    char dvb; \/\/ delimiter value begin$/;"	m	class:DB
dvb	DB.h	/^inline char dvb(DBSTyp DBS) $/;"	f
dve	DB.h	/^    char dve; \/\/ delimiter value end$/;"	m	class:DB
dve	DB.h	/^inline char dve(DBSTyp DBS) $/;"	f
edit	kons.cpp	/^const string hcl::edit="$(which vim 2>\/dev\/null || which vi) ";$/;"	m	class:hcl	file:
edit	kons.h	/^		static const string edit;$/;"	m	class:hcl
eingefuegt	kons.h	/^  int eingefuegt, verzneu;$/;"	m	class:find2cl
eins	kons.cpp	/^const string eins="1";$/;"	v
el2set	kons.h	/^typedef map<elem2,ull> el2set;$/;"	t
el2set	kons.h	/^typedef set<elem2> el2set;$/;"	t
elem2	kons.cpp	/^elem2::elem2(const string& mutter,const string& name) $/;"	f	class:elem2
elem2	kons.h	/^    elem2(){};$/;"	f	class:elem2
elem2	kons.h	/^class elem2$/;"	c
elem3	kons.h	/^    elem3(string pfad, const struct stat *sbp, int& tflag, const struct FTW *ftwp, string lnk,const struct stat& lst):$/;"	f	class:elem3
elem3	kons.h	/^class elem3$/;"	c
enableggf	kons.cpp	/^int servc::enableggf(int obverb\/*=0*\/,int oblog\/*=0*\/)$/;"	f	class:servc
ename	kons.h	/^    string sname,ename; \/\/ Dienstname, Exename$/;"	m	class:servc
engine	DB.h	/^    const string engine;$/;"	m	class:Tabelle
englisch	kons.h	/^enum Sprache {deutsch,englisch,SprachZahl};$/;"	e	enum:Sprache
eprog	kons.h	/^ string eprog; \/\/ ersetztes Programm$/;"	m	class:linst_cl
erg	kons.h	/^    set<elem3> erg;$/;"	m	class:find3cl
ergp	kons.cpp	/^set<elem3> *find3cl::ergp;$/;"	m	class:find3cl	file:
ergp	kons.h	/^    static set<elem3> *ergp;$/;"	m	class:find3cl
ergp	kons.h	/^  el2set *ergp=0;$/;"	m	class:find2cl
errmsgcl	kons.h	/^ errmsgcl(int errnr,const string& msg):errnr(errnr),msg(msg){}$/;"	f	class:errmsgcl
errmsgcl	kons.h	/^class errmsgcl$/;"	c
errnr	kons.h	/^ int errnr;$/;"	m	class:errmsgcl
ers	kons.cpp	/^char ers(const char roh)$/;"	f
ersetzAlle	kons.cpp	/^void ersetzAlle(string *quelle, const char* const alt, const char* const neu) $/;"	f
ersetzAlle	kons.cpp	/^void ersetzAlle(string *quelle, const string& alt, const string& neu) $/;"	f
ersetzAlle	kons.cpp	/^void ersetzAlle(string& quelle, const string& alt, const string& neu) $/;"	f
ersetzAllezu	kons.cpp	/^string ersetzAllezu(const char *const quelle, const char* const alt, const char* const neu) $/;"	f
ersetzAllezu	kons.cpp	/^string ersetzAllezu(const string& quelle, const string& alt, const string& neu) $/;"	f
ersetzAllezu	kons.cpp	/^string ersetzAllezu(string *quelle, const char* const alt, const char* const neu) $/;"	f
ersetze	DB.cpp	/^inline string instyp::ersetze(const char *u, const char* alt, const char* neu) $/;"	f	class:instyp
ersetze	DB.cpp	/^string *sqlft::ersetze(const char* alt, const char* neu) $/;"	f	class:sqlft
ersetze	kons.cpp	/^string ersetze(const char *const u, const char *const alt, const char *const neu) $/;"	f
ersetzefuerdatei	kons.cpp	/^string ersetzefuerdatei(const string& u) $/;"	f
ersetzeprog	kons.cpp	/^const string linst_cl::ersetzeprog(const string& prog) const$/;"	f	class:linst_cl
erweitern	DB.cpp	/^void DB::erweitern(const string& tabs, vector<instyp> einf,const size_t aktc,int obverb,uchar obsammeln, const unsigned long *maxl) const$/;"	f	class:DB
exitp	DB.cpp	5;"	d	file:
exitt	kons.h	135;"	d
falsch	kons.h	/^enum binaer:uchar {falsch,wahr};$/;"	e	enum:binaer
fed	kons.h	/^enum lsysen:uchar {usys,sus,deb,fed};$/;"	e	enum:lsysen
fehler	DB.h	/^    string fehler;$/;"	m	class:RS
fehler	kons.h	/^    int fehler=0; \/\/ Exit-Code der Exe-Datei$/;"	m	class:servc
fehnr	DB.h	/^    unsigned int fehnr;$/;"	m	class:DB
feld	DB.h	/^    const string feld;$/;"	m	class:instyp
feld	DB.h	/^    vector<string> feld;$/;"	m	class:RS
felder	DB.h	/^    Feld *felder;$/;"	m	class:Index
felder	DB.h	/^    Feld *felder;$/;"	m	class:Tabelle
feldzahl	DB.h	/^    int feldzahl;$/;"	m	class:Index
feldzahl	DB.h	/^    int feldzahl;$/;"	m	class:Tabelle
fertige	kons.h	/^    set<wele> wurz,fertige;$/;"	m	class:find3cl
fileno	kons.h	48;"	d
find2cl	kons.cpp	/^find2cl::find2cl(int _obverb\/*=0*\/,int _oblog\/*=0*\/,find2cl *stamm\/*=0*\/):obverb(_obverb),oblog(_oblog)$/;"	f	class:find2cl
find2cl	kons.h	/^class find2cl: elem2$/;"	c
find3cl	kons.cpp	/^find3cl::find3cl(int _obverb\/*=0*\/,int _oblog\/*=0*\/):obverb(_obverb),oblog(_oblog)$/;"	f	class:find3cl
find3cl	kons.h	/^class find3cl$/;"	c
finde	kons.cpp	/^int find2cl::finde(svec *wovp,const string& muster\/*=nix*\/,const long tiefe\/*=-1*\/,int typbit\/*=B_Alle*\/,int folge\/*=Fol_Dat*\/,$/;"	f	class:find2cl
finde	kons.cpp	/^int find3cl::finde(svec *wovp,const string& muster\/*=nix*\/,long tiefe\/*=-1*\/,$/;"	f	class:find3cl
findfile	kons.cpp	/^void findfile(svec *qrueckp,uchar findv,int obverb\/*=0*\/,int oblog\/*=0*\/,uchar anteil\/*=0*\/,$/;"	f
findv	kons.cpp	/^uchar findv=3; \/\/ find-Version 1=system, 2=intern mit readdir, 3=intern mit nftw$/;"	v
flags	kons.h	/^    int flags = 0;$/;"	m	class:find3cl
fmt	kons.h	/^		const char* fmt;$/;"	m	class:ztacl
fnr	DB.h	/^    unsigned int fnr;$/;"	m	class:RS
folge	kons.h	/^    int folge=0;$/;"	m	class:find3cl
folgep	kons.cpp	/^int *find3cl::folgep;$/;"	m	class:find3cl	file:
folgep	kons.h	/^    static int *folgep;$/;"	m	class:find3cl
fschreib	kons.cpp	/^int schlArr::fschreib(const string& fname)$/;"	f	class:schlArr
ftw	kons.h	/^    const struct FTW ftw={0};$/;"	m	class:elem3	typeref:struct:elem3::FTW
fuersamba	kons.cpp	/^void fuersamba(string& roh)$/;"	f
gcl0	kons.cpp	/^void hcl::gcl0()$/;"	f	class:hcl
gegenteil	kons.h	/^		uchar gegenteil=0;$/;"	m	class:optcl
gelb	kons.cpp	/^			*const gruen="\\e[0;32m", *const hgruen="\\e[1;32m", *const braun="\\e[0;33m", *const gelb="\\e[1;33m",$/;"	v
gelb	kons.cpp	/^const char *const drot="", *const rot="", *const schwarz="", *const blau="", *const gelb="", *const tuerkis="", *const hgrau="";$/;"	v
gelbs	kons.cpp	/^const string drots=drot, rots=rot, schwarzs=schwarz, blaus=blau, dblaus=dblau, gelbs=gelb, tuerkiss=tuerkis, violetts=violett, gruens=gruen;$/;"	v
gelesen	kons.h	/^    uchar gelesen=0;$/;"	m	class:cppSchluess
gen	kons.cpp	/^const boost::locale::generator gen;$/;"	v
getcols	kons.cpp	/^int getcols() $/;"	f
getcommandl0	cl.cpp	/^void hhcl::getcommandl0()$/;"	f	class:hhcl
getcommandline	cl.cpp	/^int hhcl::getcommandline()$/;"	f	class:hhcl
gethome	kons.cpp	/^string gethome()$/;"	f
getlib64	kons.cpp	/^string& lsyscl::getlib64(int obverb\/*=0*\/,int oblog\/*=0*\/)$/;"	f	class:lsyscl
getmutex	kons.cpp	/^pthread_mutex_t printf_mutex, getmutex, timemutex;$/;"	v
getstammext	kons.cpp	/^void getstammext(const string *const ganz, string *stamm, string *exten) $/;"	f
getsys	kons.cpp	/^lsysen lsyscl::getsys(int obverb\/*=0*\/,int oblog\/*=0*\/)$/;"	f	class:lsyscl
gitv	kons.cpp	/^const string& gitv=$/;"	v
groupdt	kons.cpp	/^			hcl::groupdt="\/etc\/group",$/;"	m	class:hcl	file:
groupdt	kons.h	/^		static const string passwddt, groupdt, sudoersdt;$/;"	m	class:hcl
gruen	kons.cpp	/^			*const gruen="\\e[0;32m", *const hgruen="\\e[1;32m", *const braun="\\e[0;33m", *const gelb="\\e[1;33m",$/;"	v
gruens	kons.cpp	/^const string drots=drot, rots=rot, schwarzs=schwarz, blaus=blau, dblaus=dblau, gelbs=gelb, tuerkiss=tuerkis, violetts=violett, gruens=gruen;$/;"	v
gtrim	kons.h	/^inline std::string *gtrim(std::string *str) {$/;"	f	class:std
hcl	kons.cpp	/^hcl::hcl(const int argc, const char *const *const argv)$/;"	f	class:hcl
hcl	kons.h	/^class hcl$/;"	c
hgrau	kons.cpp	/^      *const tuerkis="\\e[0;36m", *const htuerkis="\\e[1;36m", *const hgrau="\\e[0;37m", *const weiss="\\e[1;37m", *const umgek="\\e[7m";$/;"	v
hgrau	kons.cpp	/^const char *const drot="", *const rot="", *const schwarz="", *const blau="", *const gelb="", *const tuerkis="", *const hgrau="";$/;"	v
hgruen	kons.cpp	/^			*const gruen="\\e[0;32m", *const hgruen="\\e[1;32m", *const braun="\\e[0;33m", *const gelb="\\e[1;33m",$/;"	v
hhcl	cl.cpp	/^hhcl::hhcl(const int argc, const char *const *const argv):hcl(argc,argv)$/;"	f	class:hhcl
hhcl	cl.h	/^class hhcl:public hcl$/;"	c
hilfezeile	kons.cpp	/^void optioncl::hilfezeile(Sprache lg)$/;"	f	class:optioncl
holdbaussql	DB.cpp	/^svec holdbaussql(string sql) $/;"	f
hole	kons.cpp	/^const string& schlArr::hole(const string& name)$/;"	f	class:schlArr
hole	kons.cpp	/^void cppSchluess::hole (struct tm *tmp) {$/;"	f	class:cppSchluess
hole	kons.h	/^    template <typename T> void hole(T *var) { *var=atol(val); }$/;"	f	class:Schluessel
hole	kons.h	/^    template <typename T> void hole(T *var) { *var=atol(wert.c_str()); }$/;"	f	class:cppSchluess
hole	kons.h	/^template <> inline void Schluessel::hole < binaer > (binaer *var) { *var = (binaer)atoi(val); }$/;"	f	class:Schluessel
hole	kons.h	/^template <> inline void Schluessel::hole < char* > (char** var) { *var = val; }$/;"	f	class:Schluessel
hole	kons.h	/^template <> inline void Schluessel::hole < const char* > (const char** var) { *var = val; }$/;"	f	class:Schluessel
hole	kons.h	/^template <> inline void Schluessel::hole < string > (string *var) { *var = val; }$/;"	f	class:Schluessel
hole	kons.h	/^template <> inline void cppSchluess::hole < binaer > (binaer *var) { *var = (binaer)atoi(wert.c_str()); }$/;"	f	class:cppSchluess
hole	kons.h	/^template <> inline void cppSchluess::hole < char* > (char** var) {*var = (char*)wert.c_str(); }$/;"	f	class:cppSchluess
hole	kons.h	/^template <> inline void cppSchluess::hole < const char* > (const char** var) {*var = wert.c_str(); }$/;"	f	class:cppSchluess
hole	kons.h	/^template <> inline void cppSchluess::hole < string > (string *var) {*var = wert; }$/;"	f	class:cppSchluess
holsystemsprache	kons.cpp	/^string holsystemsprache(int obverb\/*=0*\/)$/;"	f
holvomnetz	kons.cpp	/^int hcl::holvomnetz(const string& datei,const string& vors\/*=defvors*\/,const string& nachs\/*=defnachs*\/)$/;"	f	class:hcl
host	DB.h	/^    const string host;$/;"	m	class:DB
host	cl.h	/^	string host="localhost";  \/\/ fuer MySQL\/MariaDB$/;"	m	class:hhcl
htuerkis	kons.cpp	/^      *const tuerkis="\\e[0;36m", *const htuerkis="\\e[1;36m", *const hgrau="\\e[0;37m", *const weiss="\\e[1;37m", *const umgek="\\e[7m";$/;"	v
hviolett	kons.cpp	/^			*const dblau="\\e[0;34;1;47m", *const blau="\\e[1;34m", *const violett="\\e[0;35m", *const hviolett="\\e[1;35m",$/;"	v
indexzahl	DB.h	/^    unsigned indexzahl;$/;"	m	class:Tabelle
indices	DB.h	/^    Index *indices;$/;"	m	class:Tabelle
init	DB.cpp	/^void DB::init($/;"	f	class:DB
init	kons.cpp	/^void confdat::init(const string& fname, schlArr *sA, int obverb, const char tz)$/;"	f	class:confdat
init	kons.cpp	/^void elem2::init(const string& vmutter, const string& name) {$/;"	f	class:elem2
init	kons.cpp	/^void find2cl::init(const string& mutter, const string& name, regex_t *reg, const int folge,const long maxdepth, const int& typbit,$/;"	f	class:find2cl
init	kons.cpp	/^void schlArr::init(size_t vzahl, ...)$/;"	f	class:schlArr
init	kons.cpp	/^void schlArr::init(vector<cppSchluess*> *sqlvp)$/;"	f	class:schlArr
initDB	cl.cpp	/^int hhcl::initDB()$/;"	f	class:hhcl
initv	kons.cpp	/^void schlArr::initv(vector<optcl*> optpv,vector<size_t> optsv)$/;"	f	class:schlArr
ins	DB.h	/^		vector< vector<instyp> > ins;$/;"	m	class:DB
instmaria	DB.cpp	/^void DB::instmaria(int obverb, int oblog)$/;"	f	class:DB
instp	kons.h	/^ string instp; \/\/ Befehl zum Installieren ueber das Installationnssystem$/;"	m	class:linst_cl
instprog	kons.h	/^enum instprog {keinp,zypper,apt,dnf,yum,urp,pac};$/;"	g
instvz	kons.cpp	/^const string& instvz=$/;"	v
instyp	DB.h	/^    \/*1*\/template <typename tC> explicit instyp (DBSTyp eDBS, char* const feld, tC vwert): feld(feld) {$/;"	f	class:instyp
instyp	DB.h	/^    \/*2*\/template <typename tC> explicit instyp (DBSTyp eDBS, const char* feld, tC vwert):feld(feld) {$/;"	f	class:instyp
instyp	DB.h	/^    \/*3*\/instyp (DBSTyp eDBS, char* feld, char *vwert):feld(feld) {$/;"	f	class:instyp
instyp	DB.h	/^    \/*4*\/instyp (DBSTyp eDBS, char* feld, char *vwert,char* zs):feld(feld) {$/;"	f	class:instyp
instyp	DB.h	/^    \/*5*\/instyp (DBSTyp eDBS, char* feld, char *vwert,bool obzahl):feld(feld) {$/;"	f	class:instyp
instyp	DB.h	/^    \/*6*\/instyp (DBSTyp eDBS, const char* feld, const char *vwert,unsigned char vobkeinwert):feld(feld) {$/;"	f	class:instyp
instyp	DB.h	/^class instyp $/;"	c
instyp	kons.h	/^ string instyp; \/\/ Befehl zum Installieren ueber das Installationnssystem mit automatischem yes auf Rueckfragen$/;"	m	class:linst_cl
ionicepf	kons.h	/^ string ionicepf; \/\/ Pfad zu ionice$/;"	m	class:linst_cl
ipr	kons.h	/^ instprog ipr=keinp; \/\/ installiertes Program$/;"	m	class:linst_cl
irfind	kons.cpp	/^size_t irfind(const string& wo, const string& was)$/;"	f
isatty	kons.h	49;"	d
isneun	kons.h	/^inline int isneun(const std::string& str)$/;"	f
isnumeric	kons.h	/^inline int isnumeric(const char* str)$/;"	f
isnumeric	kons.h	/^inline int isnumeric(const std::string& str)$/;"	f
isql	DB.h	/^    string isql; \/\/ insert-sql$/;"	m	class:RS
istelnr	kons.h	/^inline int istelnr(const std::string& str)$/;"	f
it	kons.cpp	/^set<wele>::iterator find3cl::it;$/;"	m	class:find3cl	file:
it	kons.h	/^    static set<wele>::iterator it;$/;"	m	class:find3cl
it2	kons.cpp	/^el2set::iterator it2;$/;"	v
it3	kons.cpp	/^set<elem3>::iterator it3;$/;"	v
keineverarbeitung	cl.h	/^	uchar keineverarbeitung=0; \/\/ wenn cronminuten geaendert werden sollen, vorher abkuerzen$/;"	m	class:hhcl
keinp	kons.h	/^enum instprog {keinp,zypper,apt,dnf,yum,urp,pac};$/;"	e	enum:instprog
key	kons.h	/^    char key[90];$/;"	m	class:Schluessel
kommentar	DB.h	/^    vector<string> kommentar;$/;"	m	class:RS
kompilbase	kons.cpp	/^int hcl::kompilbase(const string& was, const string& endg)$/;"	f	class:hcl
kompilfort	kons.cpp	/^int hcl::kompilfort(const string& was,const string& vorcfg\/*=nix*\/, const string& cfgbismake\/*==s_dampand*\/,uchar ohneconf\/*=0*\/)$/;"	f	class:hcl
kompiliere	kons.cpp	/^int hcl::kompiliere(const string& was,const string& endg, const string& vorcfg\/*=nix*\/, const string& cfgbismake\/*==s_dampand*\/)$/;"	f	class:hcl
kons_H_DRIN	kons.h	6;"	d
kons_T	kons.cpp	/^const char *kons_T[T_konsMAX+1][SprachZahl]=$/;"	v
kopier	kons.cpp	/^int kopier(const string& quel, const string& ziel, int obverb, int oblog)$/;"	f
kopierm	kons.cpp	/^void kopierm(const string *quelle, const string *ziel)$/;"	f
kuerzelogdatei	kons.cpp	/^int kuerzelogdatei(const char* logdatei,int obverb)$/;"	f
kuerzevtz	kons.cpp	/^void kuerzevtz(string *vzp)$/;"	f
kurzi	kons.h	/^		const int kurzi=0;$/;"	m	class:optioncl
kurzi	kons.h	/^		int kurzi=0;$/;"	m	class:optcl
laeuft	kons.cpp	/^int servc::laeuft()$/;"	f	class:servc
langi	kons.h	/^		const int langi=0;$/;"	m	class:optioncl
langi	kons.h	/^		int langi=0;$/;"	m	class:optcl
langu	kons.h	/^    string langu; \/\/ Sprache (Anfangsbuchstabe)$/;"	m	class:hcl
lassoffen	DB.h	/^		uchar lassoffen=0;$/;"	m	class:DB
laufrtag	kons.h	/^		struct tm laufrtag={0}; \/\/ Tag des letztes Aufrufs$/;"	m	class:hcl	typeref:struct:hcl::tm
lenge	DB.h	/^    string lenge;$/;"	m	class:Feld
lenge	DB.h	/^    vector<long> lenge;$/;"	m	class:RS
lengths	DB.h	/^		unsigned long *lengths;$/;"	m	class:RS
lesespalten	DB.cpp	/^void Tabelle::lesespalten(size_t aktc,int obverb\/*=0*\/,int oblog\/*=0*\/)$/;"	f	class:Tabelle
lfd	kons.h	/^		unsigned lfd;$/;"	m	class:hcl
lgn	kons.h	/^  Sprache lgn; \/\/ Sprache numerisch$/;"	m	class:TxB
lgnzuw	cl.cpp	/^void hhcl::lgnzuw()$/;"	f	class:hhcl
lgnzuw	kons.cpp	/^void hcl::lgnzuw()$/;"	f	class:hcl
libs	kons.h	/^ string libs; \/\/ alle lib-Verzeichnisse, fuer find ..$/;"	m	class:linst_cl
lief	kons.cpp	/^int servc::lief()$/;"	f	class:servc
lies	kons.cpp	/^int confdat::lies(const string& fname, int obverb)$/;"	f	class:confdat
lieskonfein	cl.cpp	/^void hhcl::lieskonfein(const string& dprog)$/;"	f	class:hhcl
lieskonfein	kons.cpp	/^void hcl::lieskonfein(const string& DPROG)$/;"	f	class:hcl
lieszaehlerein	kons.cpp	/^void hcl::lieszaehlerein(ulong *arp\/*=0*\/,ulong *tap\/*=0*\/,ulong *map\/*=0*\/, struct tm *lap\/*=0*\/,$/;"	f	class:hcl
linst_cl	kons.cpp	/^linst_cl::linst_cl(int obverb,int oblog)$/;"	f	class:linst_cl
linst_cl	kons.h	/^class linst_cl$/;"	c
linstp	DB.h	/^		linst_cl *const linstp=0;$/;"	m	class:DB
linstp	kons.h	/^		linst_cl* linstp=0;$/;"	m	class:hcl
listz	cl.h	/^	long listz=30;$/;"	m	class:hhcl
lnk	kons.h	/^    const string lnk;$/;"	m	class:elem3
loc	kons.cpp	/^const std::locale loc = gen("en_US.UTF-8");$/;"	v
loeschealleaus	kons.cpp	/^string *loeschealleaus(string *u, const char* const alt) $/;"	f
loeschefarbenaus	kons.cpp	/^string* loeschefarbenaus(string *zwi)$/;"	f
logdateineu	kons.h	/^    uchar logdateineu=0; \/\/ logdt vorher loeschen$/;"	m	class:hcl
logdname	kons.h	/^    string logdname; \/\/ Logdatei-Name ohne Pfad <DPROG>.log$/;"	m	class:hcl
logdneu	kons.h	/^    uchar logdneu=0;    \/\/ Logdatei geaendert$/;"	m	class:hcl
logdt	cl.cpp	/^const char *logdt="\/var\/log\/" DPROG "vorgabe.log";\/\/darauf wird in kons.h verwiesen; muss dann auf lgp zeigen;$/;"	v
loggespfad	kons.h	/^    string loggespfad; \/\/ Gesamtpfad, auf den dann die in kons.h verwiesene und oben definierte Variable logdt zeigt$/;"	m	class:hcl
logvneu	kons.h	/^    uchar logvneu=0;    \/\/ Logverzeichnis geaendert$/;"	m	class:hcl
logvz	kons.h	/^    string logvz; \/\/ nur das Verzeichnis \/var\/log$/;"	m	class:hcl
lst	kons.h	/^    const struct stat lst={0};$/;"	m	class:elem3	typeref:struct:elem3::stat
lstat	kons.h	60;"	d
lsys	kons.cpp	/^class lsyscl lsys;$/;"	v	typeref:class:lsyscl
lsyscl	kons.h	/^class lsyscl$/;"	c
lsysen	kons.h	/^enum lsysen:uchar {usys,sus,deb,fed};$/;"	g
ltoa_	kons.cpp	/^char* ltoa_(long value, char* result, int base=10) $/;"	f
ltoan	kons.cpp	/^string ltoan(long value, int base\/*=10*\/, uchar obtz\/*=0*\/, uchar minstel\/*=0*\/) $/;"	f
ltrim	kons.h	/^inline std::string *ltrim(std::string *str) {$/;"	f	class:std
m_color	kons.h	/^  WORD m_color;$/;"	m	struct:color
mab	kons.h	/^    time_t mab,mbis;$/;"	m	class:find3cl
mabp	kons.cpp	/^time_t *find3cl::mabp,*find3cl::mbisp;$/;"	m	class:find3cl	file:
mabp	kons.h	/^    static time_t *mabp,*mbisp;$/;"	m	class:find3cl
machbemerkung	kons.cpp	/^string& optioncl::machbemerkung(Sprache lg,binaer obfarbe)$/;"	f	class:optioncl
machbinaer	DB.cpp	/^int DB::machbinaer(const string& tabs, const size_t aktc,const string& fmeld,int obverb) const$/;"	f	class:DB
machfit	kons.cpp	/^int servc::machfit(int obverb\/*=0*\/,int oblog\/*=0*\/, binaer nureinmal\/*=falsch*\/)$/;"	f	class:servc
machind	DB.cpp	/^int Tabelle::machind(const size_t aktc, int obverb\/*=0*\/, int oblog\/*=0*\/)$/;"	f	class:Tabelle
machstrikt	DB.cpp	/^void RS::machstrikt(string& altsqlm,const size_t aktc\/*=0*\/)$/;"	f	class:RS
main	cl.cpp	/^int main(int argc,char** argv)$/;"	f
maxconz	cl.h	/^	const size_t maxconz=12;\/\/aktc: 0=... \/\/Î±$/;"	m	class:hhcl
maxd	kons.h	/^    const long maxd;$/;"	m	class:wele
maxdepth	kons.h	/^    long maxdepth=-1;$/;"	m	class:find3cl
maxdepthp	kons.cpp	/^long *find3cl::maxdepthp;$/;"	m	class:find3cl	file:
maxdepthp	kons.h	/^    static long *maxdepthp;$/;"	m	class:find3cl
mbis	kons.h	/^    time_t mab,mbis;$/;"	m	class:find3cl
mbisp	kons.cpp	/^time_t *find3cl::mabp,*find3cl::mbisp;$/;"	m	class:find3cl	file:
mbisp	kons.h	/^    static time_t *mabp,*mbisp;$/;"	m	class:find3cl
mdatei	kons.cpp	/^mdatei::mdatei(const string& name, ios_base::openmode modus\/*=ios_base::in|ios_base::out*\/,uchar faclbak\/*=1*\/,int obverb\/*=0*\/, int oblog\/*=0*\/)$/;"	f	class:mdatei
mdatei	kons.h	/^class mdatei: public fstream$/;"	c
meinname	kons.h	/^    string meinname; \/\/ base_name(meinpfad()) \/\/ argv[0] \/\/ <DPROG>$/;"	m	class:hcl
meinpfad	kons.cpp	/^string meinpfad() {$/;"	f
miterror	DB.h	/^    uchar miterror;$/;"	m	class:DB
mitset	kons.h	110;"	d
mitvtz	kons.h	/^inline std::string mitvtz(std::string const& vz)$/;"	f
monatsaufr	kons.h	/^		ulong monatsaufr=0; \/\/ Zahl der bisherigen Programmaufrufe heute$/;"	m	class:hcl
mpfad	kons.h	/^    string mpfad;  \/\/ meinpfad()$/;"	m	class:hcl
mpwd	cl.h	/^	string mpwd;  \/\/ Passwort fuer Mysql\/MariaDB \/\/Ï‰$/;"	m	class:hhcl
msg	kons.h	/^ string msg;$/;"	m	class:errmsgcl
multischlschreib	kons.cpp	/^int multischlschreib(const string& fname, schlArr *const *const mcnfApp, const size_t cszahl,const string& mpfad)$/;"	f
muser	cl.h	/^	string muser; \/\/ Benutzer fuer Mysql\/MariaDB$/;"	m	class:hhcl
myDBS	cl.cpp	/^const DBSTyp myDBS=Postgres;$/;"	v
myloghost	DB.h	/^    string myloghost; \/\/ einheitliche Benennung von 'localhost' bzw. '%', zu kompliziert, um in jedem DB::DB aufzufuehren, deshalb nicht const$/;"	m	class:DB
myr	DB.h	/^    vector<string> myr;$/;"	m	class:DB
mysqlbef	DB.h	/^    const string mysqlbef="mysql", mysqlben="mysql"; \/\/ mysql-Befehl, mysql-Benutzer$/;"	m	class:DB
mysqlben	DB.h	/^    const string mysqlbef="mysql", mysqlben="mysql"; \/\/ mysql-Befehl, mysql-Benutzer$/;"	m	class:DB
name	DB.h	/^		const string name;$/;"	m	class:Index
name	DB.h	/^    const string name;$/;"	m	class:Feld
name	kons.h	/^    string name;$/;"	m	class:confdat
name	kons.h	/^    string name;$/;"	m	class:cppSchluess
name	kons.h	/^   string name;$/;"	m	class:abSchl
name	kons.h	/^ string name;$/;"	m	class:pidcl
nersetze	kons.cpp	/^string nersetze(const string& quelle,string was, string durch)$/;"	f
neufind	kons.h	107;"	d
nicepf	kons.h	/^ string nicepf; \/\/ Pfad zu nice$/;"	m	class:linst_cl
nichtspeichern	kons.h	/^		uchar nichtspeichern=0;$/;"	m	class:optcl
nix	kons.cpp	/^const string nix;$/;"	v
nnull	DB.h	/^    bool nnull;$/;"	m	class:Feld
nochkeincron	kons.h	/^		uchar nochkeincron;$/;"	m	class:hcl
nr	kons.h	/^ unsigned long nr=0;$/;"	m	class:perfcl
nrp	kons.h	/^  ull *nrp=0;$/;"	m	class:find2cl
nrzf	kons.cpp	/^uchar nrzf=0; \/\/ nicht rueckzufragen, fuer Aufruf aus Cron, wird auch in DB verwendet $/;"	v
num_fields	DB.h	/^    unsigned int num_fields;$/;"	m	class:RS
num_rows	DB.h	/^    unsigned long long  num_rows;$/;"	m	class:RS
nurexec	kons.h	/^		int nurexec;$/;"	m	class:find3cl
nurexecp	kons.cpp	/^int *find3cl::nurexecp;$/;"	m	class:find3cl	file:
nurexecp	kons.h	/^		static int *nurexecp;$/;"	m	class:find3cl
oausgeb	kons.cpp	/^void optcl::oausgeb()$/;"	f	class:optcl
obauto	DB.h	/^    bool obauto;$/;"	m	class:Feld
obcf	kons.h	/^		uchar obcf=0; \/\/ ob die Option schon einmal vorkam fÃ¼r die Konfigurationsdatei$/;"	m	class:optioncl
obcl	kons.h	/^		uchar obcl=0; \/\/ ob die Option ueber die Kommandozeile gesetzt wurde$/;"	m	class:optioncl
obcl	kons.h	/^		uchar obcl=0; \/\/ wie oft die Option ueber die Kommandozeile gesetzt wurde$/;"	m	class:optcl
obenabled	kons.h	/^		int obenabled=0;$/;"	m	class:servc
oberreicht	kons.cpp	/^int perfcl::oberreicht(unsigned long sek)$/;"	f	class:perfcl
obfehl	DB.h	/^    uchar obfehl;$/;"	m	class:RS
obfehlt	kons.cpp	/^int linst_cl::obfehlt(const string& prog,int obverb,int oblog)$/;"	f	class:linst_cl
obfstream	kons.h	919;"	d
obgelesen	kons.h	/^    uchar obgelesen=0;$/;"	m	class:confdat
obhilfe	kons.h	/^    uchar obhilfe=0;      \/\/ Hilfe anzeigen: 1=kurze Hilfe, 2=lange Hilfe, 3=Standardhilfe$/;"	m	class:hcl
obind	DB.h	/^    bool obind;$/;"	m	class:Feld
obkeinwert	DB.h	/^    unsigned char obkeinwert; \/\/ bei update wird <wert> nicht als Wert, sondern ohne Anf'z.(z.B.als Feld) verwendet (z.B. update xy set altdatum = datum)$/;"	m	class:instyp
obkschreib	kons.h	/^    uchar obkschreib=0; \/\/ Konfigurationsdatei schreiben$/;"	m	class:hcl
oblgschreib	kons.h	/^    uchar oblgschreib=0; \/\/ Konfigurationsdatei seitens der Sprache voraussichtlich schreiben$/;"	m	class:hcl
oblista	cl.h	/^	uchar oblista=0;$/;"	m	class:hhcl
oblog	kons.h	/^		int obverb=0, oblog=0;$/;"	m	class:find3cl
oblog	kons.h	/^	int obverb,oblog;$/;"	m	class:find2cl
oblog	kons.h	/^    int oblog=0;  \/\/ mehr Protokollieren$/;"	m	class:hcl
oblogp	kons.cpp	/^int *find3cl::obverbp, *find3cl::oblogp;$/;"	m	class:find3cl	file:
oblogp	kons.h	/^		static int *obverbp, *oblogp;$/;"	m	class:find3cl
obnmr	kons.h	/^ uchar obnmr=1;$/;"	m	class:linst_cl
obno	kons.h	/^    const uchar obno=0; \/\/ ob auch die Option mit vorangestelltem 'no' eingefuegt werden soll$/;"	m	class:optioncl
obno	kons.h	/^    uchar obno=0; \/\/ ob auch die Option mit vorangestelltem 'no' eingefuegt werden soll$/;"	m	class:optcl
oboffen	kons.h	/^  int oboffen=0;$/;"	m	class:mdatei
obprogda	kons.cpp	/^int obprogda(const string& prog, int obverb\/*=0*\/, int oblog\/*=0*\/, string *pfad\/*=0*\/)$/;"	f
obschreibp	kons.h	/^    uchar *obschreibp=0; \/\/ ob Konfiguration geschrieben werden muss$/;"	m	class:optcl
obschreibp	kons.h	/^    uchar *obschreibp=0; \/\/ ob Konfiguration geschrieben werden muss$/;"	m	class:optioncl
obsotiff	kons.h	/^		uchar obsotiff=0; \/\/ 1 = tiff wird von der source verwendet$/;"	m	class:hcl
obsvfeh	kons.cpp	/^int servc::obsvfeh(int obverb\/*=0*\/,int oblog\/*=0*\/) \/\/ ob service einrichtungs fehler$/;"	f	class:servc
obverb	kons.h	/^		int obverb=0, oblog=0;$/;"	m	class:find3cl
obverb	kons.h	/^	int obverb,oblog;$/;"	m	class:find2cl
obverb	kons.h	/^    int obverb=0; \/\/ verbose$/;"	m	class:hcl
obverbp	kons.cpp	/^int *find3cl::obverbp, *find3cl::oblogp;$/;"	m	class:find3cl	file:
obverbp	kons.h	/^		static int *obverbp, *oblogp;$/;"	m	class:find3cl
obvi	cl.h	/^  uchar obvi=0; \/\/ ob Konfigurationsdatei editiert werden soll$/;"	m	class:hhcl
obvs	cl.h	/^	uchar obvs=0;   \/\/ ob Quelldateien bearbeitet werden sollen$/;"	m	class:hhcl
oeffne	kons.cpp	/^oeffne(const string& datei, uchar art, uchar* erfolg,int obverb\/*=0*\/, int oblog\/*=0*\/,uchar faclbak\/*=1*\/)$/;"	f
oisok	DB.cpp	/^uchar DB::oisok=0;$/;"	m	class:DB	file:
oisok	DB.h	/^    static uchar oisok; \/\/ 1=Installation von MariaDB wurde ueberprueft$/;"	m	class:DB
okmap	kons.h	/^		map<string,optcl*> okmap; \/\/ map der Optionen, sortiert nach Tx[<kurzi>]$/;"	m	class:hcl
olmap	kons.h	/^		map<string,optcl*> olmap; \/\/ map der Optionen, sortiert nach Tx[<langi>]$/;"	m	class:hcl
omap	kons.h	/^		map<string,optcl*> omap; \/\/ map der Optionen$/;"	m	class:hcl
omapzuw	kons.cpp	/^void hcl::omapzuw(optcl *optp,size_t optz)$/;"	f	class:hcl
omit	kons.h	/^		map<string,optcl*>::iterator omit; \/\/ Optionen-Iterator$/;"	m	class:hcl
operator ()	kons.cpp	/^ostream &ztacl::operator()(std::ostream& out) const {$/;"	f	class:ztacl
operator <	kons.cpp	/^const bool elem2::operator<(const elem2& el) const {return (this->pfad<el.pfad);}$/;"	f	class:elem2
operator <	kons.cpp	/^const bool elem3::operator<(const elem3& el) const {return (this->pfad<el.pfad);}$/;"	f	class:elem3
operator <	kons.cpp	/^const bool wele::operator<(const wele& el) const {return (this->pfad<el.pfad);}$/;"	f	class:wele
operator <<	kons.cpp	/^  std::basic_ostream<_Elem,_Traits>& operator<<(std::basic_ostream<_Elem,_Traits>& i, color& c){$/;"	f	class:std
operator <<	kons.cpp	/^ostream &operator<<(ostream &out,ztacl ztaus) {$/;"	f
operator <<	kons.h	/^    inline svec& operator<<(const std::string& str) {$/;"	f	class:svec
operator <<	kons.h	/^    inline tsvec<T>& operator<<(const T& str) {$/;"	f	class:tsvec
operator <<	kons.h	/^ inline pidvec& operator<<(const pidcl& pd) {$/;"	f	class:pidvec
operator []	kons.h	/^  inline const char* operator[](long const& nr) const {$/;"	f	class:TxB
operator []	kons.h	/^ inline const cppSchluess& operator[](size_t const& nr) const { return schl[nr]; }$/;"	f	class:schlArr
operator []	kons.h	/^ inline cppSchluess& operator[](size_t const& nr) { return schl[nr]; }$/;"	f	class:schlArr
optausg	kons.cpp	/^void hcl::optausg(const char *farbe)$/;"	f	class:hcl
optcl	kons.h	/^class optcl$/;"	c
optioncl	kons.cpp	/^\/*2a*\/optioncl::optioncl(int kurzi,int langi,TxB *TxBp,long Txi,uchar wi,string *zptr,par_t art,schlArr *cpA,const char *pname,uchar* obschreibp) : $/;"	f	class:optioncl
optioncl	kons.cpp	/^\/*3a*\/optioncl::optioncl(int kurzi,int langi,TxB *TxBp,long Txi,uchar wi,const string *rottxt,long Txi2,string *zptr,par_t art,schlArr *cpA, $/;"	f	class:optioncl
optioncl	kons.cpp	/^\/*3b*\/optioncl::optioncl(int kurzi,int langi,TxB *TxBp,long Txi,uchar wi,const string *rottxt,long Txi2,int *pptr,par_t art,schlArr *cpA\/*=0*\/,$/;"	f	class:optioncl
optioncl	kons.cpp	/^\/*4*\/optioncl::optioncl(int kurzi,int langi,TxB *TxBp,long Txi,uchar wi,uchar *pptr,int wert,schlArr *cpA, const char *pname,uchar* obschreibp) :$/;"	f	class:optioncl
optioncl	kons.h	/^\/*6a*\/optioncl(int kurzi,int langi,TxB *TxBp,long Txi,uchar wi,const string *rottxt,long Txi2,uchar *pptr,int wert) : $/;"	f	class:optioncl
optioncl	kons.h	/^\/*9a*\/optioncl(int kurzi,int langi,TxB *TxBp,long Txi,uchar wi,string *rottxt,long Txi2,int *pptr,int wert) : $/;"	f	class:optioncl
optioncl	kons.h	/^class optioncl$/;"	c
optpv	kons.h	/^		vector<optcl*> optpv; \/\/ Vektor der zugewiesenen Optionenzeiger$/;"	m	class:hcl
opts	kons.h	/^    vector<optioncl> opts;$/;"	m	class:hcl
optslsz	kons.h	/^    size_t optslsz=0; \/\/ last opts.size()$/;"	m	class:hcl
optsv	kons.h	/^		vector<size_t> optsv; \/\/ Vektor von deren jeweiliger GrÃ¶ÃŸe$/;"	m	class:hcl
p1	cl.h	/^	string p1;$/;"	m	class:hhcl
p2	cl.h	/^	int p2;$/;"	m	class:hhcl
p3	cl.h	/^	string p3;$/;"	m	class:hhcl
p3cpf	kons.h	/^ string p3cpf; \/\/ Pfad zu python3-config$/;"	m	class:linst_cl
pac	kons.h	/^enum instprog {keinp,zypper,apt,dnf,yum,urp,pac};$/;"	e	enum:instprog
par_t	kons.h	/^enum par_t:uchar {psons,pverz,pfile,puchar,pint,plong}; \/\/ Parameterart: Sonstiges, Verzeichnis, Zahl, binÃ¤r$/;"	g
passwd	DB.h	/^    string passwd; \/\/ kann in pruefrpw dem eingegebenen rootpw gleichgesetz werden, deshalb nicht const$/;"	m	class:DB
passwd	kons.h	/^ struct passwd *passwd;$/;"	m	class:cuscl	typeref:struct:cuscl::
passwddt	kons.cpp	/^const string	hcl::passwddt="\/etc\/passwd",$/;"	m	class:hcl	file:
passwddt	kons.h	/^		static const string passwddt, groupdt, sudoersdt;$/;"	m	class:hcl
pconn	DB.h	/^		PGconn *pconn,*pmconn;$/;"	m	class:DB
perfcl	kons.cpp	/^perfcl::perfcl(const string& vvonwo): vonwo(vvonwo)$/;"	f	class:perfcl
perfcl	kons.h	/^class perfcl$/;"	c
pfad	kons.h	/^    const string pfad;$/;"	m	class:wele
pfad	kons.h	/^    string pfad;$/;"	m	class:elem2
pfad	kons.h	/^    string pfad;$/;"	m	class:elem3
pfile	kons.h	/^enum par_t:uchar {psons,pverz,pfile,puchar,pint,plong}; \/\/ Parameterart: Sonstiges, Verzeichnis, Zahl, binÃ¤r$/;"	e	enum:par_t
pid	kons.h	/^ pid_t pid;$/;"	m	class:pidcl
pidcl	kons.h	/^ pidcl(const pid_t pid,const string& name):pid(pid),name(name){}$/;"	f	class:pidcl
pidcl	kons.h	/^class pidcl$/;"	c
pidvec	kons.h	/^class pidvec: public vector<pidcl>$/;"	c
pint	kons.h	/^enum par_t:uchar {psons,pverz,pfile,puchar,pint,plong}; \/\/ Parameterart: Sonstiges, Verzeichnis, Zahl, binÃ¤r$/;"	e	enum:par_t
pkill	kons.cpp	/^void servc::pkill(int obverb\/*=0*\/,int oblog\/*=0*\/)$/;"	f	class:servc
plong	kons.h	/^enum par_t:uchar {psons,pverz,pfile,puchar,pint,plong}; \/\/ Parameterart: Sonstiges, Verzeichnis, Zahl, binÃ¤r$/;"	e	enum:par_t
pmconn	DB.h	/^		PGconn *pconn,*pmconn;$/;"	m	class:DB
pname	kons.h	/^		string pname=""; \/\/ Name des Konfigurationsparameters$/;"	m	class:optcl
pname	kons.h	/^    const char *pname; \/\/ Name des Konfigurationsparameters$/;"	m	class:optioncl
pptr	kons.h	/^    const void *pptr=0; \/\/ Zeiger auf Parameter, der hier eingestellt werden kann$/;"	m	class:optcl
pptr	kons.h	/^    uchar *pptr=0; \/\/ Zeiger auf binÃ¤ren Parameter, der hier eingestellt werden kann$/;"	m	class:optioncl
prec	DB.h	/^    const string prec;$/;"	m	class:Feld
prec	DB.h	/^    vector<long> prec;$/;"	m	class:RS
pres	DB.h	/^		PGresult *pres;$/;"	m	class:RS
printBits	kons.cpp	/^void printBits(size_t const size, void const * const ptr)$/;"	f
printf_mutex	kons.cpp	/^pthread_mutex_t printf_mutex, getmutex, timemutex;$/;"	v
progvers	kons.cpp	/^double hcl::progvers(const string& prog)$/;"	f	class:hcl
pruefDB	cl.cpp	/^int hhcl::pruefDB(const string& db)$/;"	f	class:hhcl
pruefberecht	kons.cpp	/^int pruefberecht(const string& datei,const string& benutzer,const mode_t mod\/*=01*\/,int obverb\/*=0*\/)$/;"	f
pruefcl	kons.cpp	/^void hcl::pruefcl() \/\/ commandline mit omap und mit argcmv parsen$/;"	f	class:hcl
pruefcron	kons.cpp	/^uchar hcl::pruefcron(const string& cm)$/;"	f	class:hcl
prueffunc	DB.cpp	/^void DB::prueffunc(const string& pname, const string& body, const string& para, const size_t aktc, int obverb, int oblog)$/;"	f	class:DB
pruefggfmehrfach	cl.cpp	/^void hhcl::pruefggfmehrfach()$/;"	f	class:hhcl
pruefinstv	kons.cpp	/^int hcl::pruefinstv()$/;"	f	class:hcl
pruefmehrfach	kons.cpp	/^void pruefmehrfach(const string& wen,uchar obstumm\/*=0*\/)$/;"	f
pruefpar	kons.cpp	/^int optioncl::pruefpar(vector<argcl> *const argcvm , size_t *const akt, uchar *hilfe) \/\/ 1 = das war der Parameter, 0 = nicht$/;"	f	class:optioncl
pruefplatte	kons.cpp	/^void pruefplatte()$/;"	f
pruefrpw	DB.cpp	/^void DB::pruefrpw(const string& wofuer, unsigned versuchzahl)$/;"	f	class:DB
pruefsamba	kons.cpp	/^void hcl::pruefsamba(const vector<const string*>& vzn,const svec& abschni,const svec& suchs, const char* DPROG,const string& cuser)$/;"	f	class:hcl
prueftab	DB.cpp	/^int Tabelle::prueftab(const size_t aktc,int obverb\/*=0*\/,int oblog\/*=0*\/) $/;"	f	class:Tabelle
prueftif	kons.cpp	/^void hcl::prueftif(string aktvers)$/;"	f	class:hcl
pruefverz	kons.cpp	/^int pruefverz(const string& verz,int obverb\/*=0*\/,int oblog\/*=0*\/, uchar obmitfacl\/*=0*\/,uchar obmitcon\/*=0*\/, $/;"	f
psons	kons.h	/^enum par_t:uchar {psons,pverz,pfile,puchar,pint,plong}; \/\/ Parameterart: Sonstiges, Verzeichnis, Zahl, binÃ¤r$/;"	e	enum:par_t
puchar	kons.h	/^enum par_t:uchar {psons,pverz,pfile,puchar,pint,plong}; \/\/ Parameterart: Sonstiges, Verzeichnis, Zahl, binÃ¤r$/;"	e	enum:par_t
pverz	kons.h	/^enum par_t:uchar {psons,pverz,pfile,puchar,pint,plong}; \/\/ Parameterart: Sonstiges, Verzeichnis, Zahl, binÃ¤r$/;"	e	enum:par_t
pwk	cl.cpp	/^const string& pwk = "4893019320jfdksalÃ¶590ÃŸs89d0qÃƒ9m0943Ãƒ09Ãƒax"; \/\/ fuer Antlitzaenderung$/;"	v
pzuweis	kons.cpp	/^int hcl::pzuweis(optcl* optp, const char *nacstr, const uchar gegenteil\/*=0*\/, const uchar nichtspeichern\/*=0*\/)$/;"	f	class:hcl
reduzierlibtiff	kons.cpp	/^void hcl::reduzierlibtiff()$/;"	f	class:hcl
reg	kons.h	/^    regex_t reg;$/;"	m	class:find3cl
regp	kons.cpp	/^regex_t *find3cl::regp;$/;"	m	class:find3cl	file:
regp	kons.h	/^    static regex_t *regp;$/;"	m	class:find3cl
repos	kons.h	/^ string repos; \/\/ Befehl zum Hinzufuegen des Repositories fuer den Compiler$/;"	m	class:linst_cl
reset	kons.cpp	/^void schlArr::reset()$/;"	f	class:schlArr
restart	kons.cpp	/^int servc::restart(int obverb\/*=0*\/,int oblog\/*=0*\/)$/;"	f	class:servc
result	DB.h	/^    MYSQL_RES *result;$/;"	m	class:RS
richtige	kons.h	/^    size_t richtige;$/;"	m	class:confdat
right	kons.h	/^inline std::string right(std::string const& source, size_t const length)$/;"	f
rootpwd	DB.h	/^    string rootpwd; \/\/ root-Passwort \/\/ wird in pruefrpw geaendert, deshalb nicht const$/;"	m	class:DB
rot	kons.cpp	/^const char *const drot="", *const rot="", *const schwarz="", *const blau="", *const gelb="", *const tuerkis="", *const hgrau="";$/;"	v
rot	kons.cpp	/^const char *const schwarz="\\e[0m", *const dgrau="\\e[1;30m", *const drot="\\e[0;31m", *const rot="\\e[1;31m",$/;"	v
rots	kons.cpp	/^const string drots=drot, rots=rot, schwarzs=schwarz, blaus=blau, dblaus=dblau, gelbs=gelb, tuerkiss=tuerkis, violetts=violett, gruens=gruen;$/;"	v
rottxt	kons.h	/^    const string *rottxt=0; \/\/ ggf rot zu markierender Text zwischen Txi und Txi2$/;"	m	class:optioncl
rottxt	kons.h	/^    string *rottxt=0; \/\/ ggf rot zu markierender Text zwischen Txi und Txi2$/;"	m	class:optcl
row	DB.h	/^    MYSQL_ROW row;$/;"	m	class:RS
rowformat	DB.h	/^    const string rowformat;$/;"	m	class:Tabelle
rtrim	kons.h	/^inline void rtrim(char* str,size_t size) {$/;"	f
rueckfragen	cl.cpp	/^void hhcl::rueckfragen()$/;"	f	class:hhcl
rzf	kons.h	/^    uchar rzf=0; \/\/ rueckzufragen$/;"	m	class:hcl
s_dampand	kons.cpp	/^const string s_dampand="&&";$/;"	v
s_gz	kons.cpp	/^const string s_gz="gz";$/;"	v
s_true	kons.cpp	/^const string s_true="true";$/;"	v
sb	kons.h	/^    const struct stat sb={0};$/;"	m	class:elem3	typeref:struct:elem3::stat
schau	kons.h	/^ string schau; \/\/ Befehl zum Pruefen auf Vorhandensein ueber das Installationssystem$/;"	m	class:linst_cl
schl	kons.h	/^ vector<cppSchluess> schl;$/;"	m	class:schlArr
schlArr	kons.cpp	/^schlArr::schlArr()$/;"	f	class:schlArr
schlArr	kons.h	/^class schlArr {$/;"	c
schlussanzeige	kons.cpp	/^void hcl::schlussanzeige()$/;"	f	class:hcl
schreibzaehler	kons.cpp	/^void hcl::schreibzaehler($/;"	f	class:hcl
schwarz	kons.cpp	/^const char *const drot="", *const rot="", *const schwarz="", *const blau="", *const gelb="", *const tuerkis="", *const hgrau="";$/;"	v
schwarz	kons.cpp	/^const char *const schwarz="\\e[0m", *const dgrau="\\e[1;30m", *const drot="\\e[0;31m", *const rot="\\e[1;31m",$/;"	v
schwarzs	kons.cpp	/^const string drots=drot, rots=rot, schwarzs=schwarz, blaus=blau, dblaus=dblau, gelbs=gelb, tuerkiss=tuerkis, violetts=violett, gruens=gruen;$/;"	v
semanpruef	kons.cpp	/^void servc::semanpruef(int obverb\/*=0*\/,int oblog\/*=0*\/,const string& mod\/*="getty_t*\/)$/;"	f	class:servc
semodpruef	kons.cpp	/^void servc::semodpruef(linst_cl *linstp,int obverb\/*=0*\/,int oblog\/*=0*\/)$/;"	f	class:servc
sersetze	DB.cpp	/^inline string *instyp::sersetze( string *src, string const& target, string const& repl) $/;"	f	class:instyp
sersetze	DB.cpp	/^string *sqlft::sersetze( string *src, string const& target, string const& repl) $/;"	f	class:sqlft
sersetze	kons.cpp	/^string *sersetze(string* src, string const& target, string const& repl) $/;"	f
servc	kons.cpp	/^servc::servc(const string& vsname,const string& vename,int obverb, int oblog): sname((vsname.empty()?vename:vsname)),ename(vename) $/;"	f	class:servc
servc	kons.h	/^    servc(const string& vsname,const string& vename): sname((vsname.empty()?vename:vsname)),ename(vename) {}$/;"	f	class:servc
servc	kons.h	/^class servc {$/;"	c
setfaclggf	kons.cpp	/^void setfaclggf(const string& datei,int obverb\/*=0*\/,int oblog\/*=0*\/,const binaer obunter\/*=falsch*\/,int mod\/*=4*\/,uchar obimmer\/*=0*\/,$/;"	f
setzbemv	kons.cpp	/^void schlArr::setzbemv(const string& name,TxB *TxBp,size_t Tind,uchar obfarbe,svec *fertige)$/;"	f	class:schlArr
setzbenutzer	kons.cpp	/^void hcl::setzbenutzer(string *user)$/;"	f	class:hcl
setze	kons.cpp	/^int schlArr::setze(const string& name, const string& wert\/*, const string& bem*\/)$/;"	f	class:schlArr
setze	kons.h	/^    template <typename T> void setze(T *var) { strncpy(val,ltoan(*var),sizeof val-1);val[sizeof val-1]=0; }$/;"	f	class:Schluessel
setze	kons.h	/^    template <typename T> void setze(T *var) { wert=ltoan(*var); }$/;"	f	class:cppSchluess
setze	kons.h	/^template <> inline void Schluessel::setze < char* > (char** var) { strncpy(val,*var,sizeof val-1);val[sizeof val-1]=0; }$/;"	f	class:Schluessel
setze	kons.h	/^template <> inline void Schluessel::setze < const char* > (const char** var) { strncpy(val,*var,sizeof val-1);val[sizeof val-1]=0; }$/;"	f	class:Schluessel
setze	kons.h	/^template <> inline void Schluessel::setze < string > (string *var) { strncpy(val,var->c_str(),sizeof val-1);val[sizeof val-1]=0;}$/;"	f	class:Schluessel
setze	kons.h	/^template <> inline void cppSchluess::setze < char* > (char** var) {wert=*var;  }$/;"	f	class:cppSchluess
setze	kons.h	/^template <> inline void cppSchluess::setze < const char* > (const char** var) {wert=*var; }$/;"	f	class:cppSchluess
setze	kons.h	/^template <> inline void cppSchluess::setze < const string > (const string *var) {wert=*var; }$/;"	f	class:cppSchluess
setze	kons.h	/^template <> inline void cppSchluess::setze < string > (string *var) {wert=*var;}$/;"	f	class:cppSchluess
setze	kons.h	/^template <> inline void cppSchluess::setze < struct tm > (struct tm *tmp) {$/;"	f	class:cppSchluess
setzebem	kons.cpp	/^void optioncl::setzebem(schlArr *cpA,const char *pname)$/;"	f	class:optioncl
setzlog	kons.cpp	/^void hcl::setzlog()$/;"	f	class:hcl
setzrpw	DB.cpp	/^void DB::setzrpw(int obverb\/*=0*\/,int oblog\/*=0*\/) \/\/ Setze root-password$/;"	f	class:DB
setztmpcron	kons.cpp	/^void hcl::setztmpcron()$/;"	f	class:hcl
setzzaehler	kons.cpp	/^void hcl::setzzaehler()$/;"	f	class:hcl
sfeh	kons.cpp	/^const int sfeh[]={ T_Dienst_laeuft,T_Dienst_inexistent, T_Dienst_disabled, T_Dienstdateiname_nicht_ermittelbar, T_Dienst_laeuft_noch_aber_Dienstdatei_inexistent, T_Exec_Dateiname_nicht_ermittelbar, T_Exec_Datei_fehlt, T_activating, T_Dienst_kann_gestartet_werden, T_Sonstiges};$/;"	v
shpf	kons.h	/^ string shpf; \/\/ Pfad zu sh$/;"	m	class:linst_cl
smbdt	kons.cpp	/^const char* const hcl::smbdt="\/etc\/samba\/smb.conf";$/;"	m	class:hcl	file:
smbdt	kons.h	/^		static const char* const smbdt;\/\/ "\/etc\/samba\/smb.conf"$/;"	m	class:hcl
sname	kons.h	/^    string sname,ename; \/\/ Dienstname, Exename$/;"	m	class:servc
snprintf	kons.h	78;"	d
spalt	DB.h	/^    RS *spalt=nullptr;$/;"	m	class:Tabelle
spath	kons.cpp	/^const string& spath=$/;"	v
spezopt	cl.cpp	/^void hhcl::spezopt()$/;"	f	class:hhcl
splenge	DB.h	/^		const char **spnamen=nullptr, **splenge=nullptr, **sptyp=nullptr;$/;"	m	class:Tabelle
spnamen	DB.h	/^		const char **spnamen=nullptr, **splenge=nullptr, **sptyp=nullptr;$/;"	m	class:Tabelle
sprachcstr	kons.cpp	/^const char* sprachcstr=&sprachstr.front();$/;"	v
sprachstr	kons.cpp	/^const string sprachstr=string("Language\/Sprache\/Lingue\/Lingua [")+blau+'d'+schwarz+"eutsch,"+blau+'e'+schwarz+"nglisch]"+"";$/;"	v
spruef	kons.cpp	/^uchar servc::spruef(const string& sbez, uchar obfork, const string& parent, const string& sexec, const string& CondPath, const string& After, $/;"	f	class:servc
sptyp	DB.h	/^		const char **spnamen=nullptr, **splenge=nullptr, **sptyp=nullptr;$/;"	m	class:Tabelle
sql	DB.h	/^    string sql;$/;"	m	class:RS
sqlft	DB.cpp	/^sqlft::sqlft(DBSTyp eDBS, char* vwert,char* zs):$/;"	f	class:sqlft
sqlft	DB.cpp	/^sqlft::sqlft(DBSTyp eDBS, char* vwert,const bool obzahl):$/;"	f	class:sqlft
sqlft	DB.cpp	/^sqlft::sqlft(DBSTyp eDBS, const char c):$/;"	f	class:sqlft
sqlft	DB.cpp	/^sqlft::sqlft(DBSTyp eDBS, const int i):$/;"	f	class:sqlft
sqlft	DB.cpp	/^sqlft::sqlft(DBSTyp eDBS, const long int i):$/;"	f	class:sqlft
sqlft	DB.cpp	/^sqlft::sqlft(DBSTyp eDBS, const long long int i):$/;"	f	class:sqlft
sqlft	DB.cpp	/^sqlft::sqlft(DBSTyp eDBS, const string *vwert):$/;"	f	class:sqlft
sqlft	DB.cpp	/^sqlft::sqlft(DBSTyp eDBS, const string& vwert):$/;"	f	class:sqlft
sqlft	DB.cpp	/^sqlft::sqlft(DBSTyp eDBS, const time_t *tm): string(21,0)$/;"	f	class:sqlft
sqlft	DB.cpp	/^sqlft::sqlft(DBSTyp eDBS, const uchar c):$/;"	f	class:sqlft
sqlft	DB.cpp	/^sqlft::sqlft(DBSTyp eDBS, const unsigned int i):$/;"	f	class:sqlft
sqlft	DB.cpp	/^sqlft::sqlft(DBSTyp eDBS, const unsigned long int i):$/;"	f	class:sqlft
sqlft	DB.cpp	/^sqlft::sqlft(DBSTyp eDBS, tm* const zt):$/;"	f	class:sqlft
sqlft	DB.h	/^class sqlft: public string $/;"	c
stack	kons.h	/^  vector<string> stack;$/;"	m	class:find2cl
start	kons.cpp	/^void servc::start(int obverb\/*=0*\/,int oblog\/*=0*\/)$/;"	f	class:servc
startbar	kons.cpp	/^int servc::startbar()$/;"	f	class:servc
startundenable	kons.cpp	/^int servc::startundenable(int obverb\/*=0*\/,int oblog\/*=0*\/)$/;"	f	class:servc
sterg	kons.h	/^    int sterg;$/;"	m	class:elem2
stmax	DB.cpp	/^void stmax(int *zahl,int stellen=2)$/;"	f
stop	kons.cpp	/^void servc::stop(int obverb\/*=0*\/,int oblog\/*=0*\/,uchar mitpkill\/*=0*\/)$/;"	f	class:servc
stopdis	kons.cpp	/^void servc::stopdis(int obverb\/*=0*\/,int oblog\/*=0*\/,uchar mitpkill)$/;"	f	class:servc
stopggf	kons.cpp	/^void servc::stopggf(int obverb\/*=0*\/,int oblog\/*=0*\/,uchar mitpkill\/*=0*\/)$/;"	f	class:servc
striktzurueck	DB.cpp	/^void RS::striktzurueck(string& altsqlm,const size_t aktc\/*=0*\/)$/;"	f	class:RS
string_to_hex	kons.cpp	/^std::string string_to_hex(const std::string& input)$/;"	f
suche	kons.cpp	/^const string& absch::suche(const char* const sname)$/;"	f	class:absch
suche	kons.cpp	/^const string& absch::suche(const string& sname)$/;"	f	class:absch
sudc	kons.cpp	/^const string sudc=(cus.cuid?"sudo ":nix);$/;"	v
sudoersdt	kons.cpp	/^			hcl::sudoersdt="\/etc\/sudoers";$/;"	m	class:hcl	file:
sudoersdt	kons.h	/^		static const string passwddt, groupdt, sudoersdt;$/;"	m	class:hcl
sus	kons.h	/^enum lsysen:uchar {usys,sus,deb,fed};$/;"	e	enum:lsysen
svec	kons.h	/^class svec: public vector<std::string>$/;"	c
svf0	kons.h	/^		int svf0=-1; \/\/ Einstellung nach erstem Ablauf von obsvfeh$/;"	m	class:servc
svfeh	kons.h	/^    int svfeh=-1; \/\/ Ausgangseinstellung$/;"	m	class:servc
sys	kons.h	/^    lsysen sys=usys; $/;"	m	class:lsyscl
systemd	kons.h	/^		string systemd; \/\/ Dienst-Datei$/;"	m	class:servc
systemrueck	kons.cpp	/^int systemrueck(const string& cmd, char obverb\/*=0*\/, int oblog\/*=0*\/, vector<string> *rueck\/*=0*\/, const uchar obsudc\/*=0*\/,$/;"	f
t0	kons.h	/^ time_t t0=0, t1;$/;"	m	class:perfcl
t1	kons.h	/^ time_t t0=0, t1;$/;"	m	class:perfcl
tabelle	cl.h	/^	string tabelle  \/\/Ï‰$/;"	m	class:hhcl
table	DB.h	/^    string table;$/;"	m	class:RS
tagesaufr	kons.h	/^		ulong tagesaufr=0; \/\/ Zahl der bisherigen Programmaufrufe heute$/;"	m	class:hcl
tbins	DB.cpp	/^my_ulonglong RS::tbins(const string& itab, vector<instyp>* einfp,const size_t aktc\/*=0*\/,uchar sammeln\/*=0*\/,$/;"	f	class:RS
tbname	DB.h	/^    const string tbname;$/;"	m	class:Tabelle
tbupd	DB.cpp	/^void RS::tbupd(const string& utab, vector< instyp > einf,int obverb, const string& bedingung,const size_t aktc\/*=0*\/,uchar asy\/*=0*\/) $/;"	f	class:RS
tende	kons.h	/^    double tstart, tende;$/;"	m	class:hcl
tflag	kons.h	/^    int tflag;$/;"	m	class:elem3
tiffmark	kons.cpp	/^const string tiffmark="\/usr\/local\/sclibtiff";$/;"	v
timemutex	kons.cpp	/^pthread_mutex_t printf_mutex, getmutex, timemutex;$/;"	v
tmmoegl	kons.cpp	/^const char *const tmmoegl[2]={"%d.%m.%y","%c"}; \/\/ Moeglichkeiten fuer strptime$/;"	v
tmpcron	kons.h	/^		string tmpcron; \/\/ fuer crontab$/;"	m	class:hcl
tmtosql	DB.cpp	/^char* DB::tmtosql(tm *tmh,char* buf) $/;"	f	class:DB
tmtosqlmZ	DB.cpp	/^char* DB::tmtosqlmZ(tm *tmh,char* buf) $/;"	f	class:DB
touch	kons.cpp	/^int touch(const string& pfad,int obverb\/*=0*\/,int oblog\/*=0*\/)$/;"	f
tstart	kons.h	/^    double tstart, tende;$/;"	m	class:hcl
tsvec	kons.h	/^class tsvec: public vector<T>$/;"	c
tucronschreib	kons.cpp	/^void hcl::tucronschreib(const string& zsauf,const uchar cronzuplanen,const string& cbef)$/;"	f	class:hcl
tuerkis	kons.cpp	/^      *const tuerkis="\\e[0;36m", *const htuerkis="\\e[1;36m", *const hgrau="\\e[0;37m", *const weiss="\\e[1;37m", *const umgek="\\e[7m";$/;"	v
tuerkis	kons.cpp	/^const char *const drot="", *const rot="", *const schwarz="", *const blau="", *const gelb="", *const tuerkis="", *const hgrau="";$/;"	v
tuerkiss	kons.cpp	/^const string drots=drot, rots=rot, schwarzs=schwarz, blaus=blau, dblaus=dblau, gelbs=gelb, tuerkiss=tuerkis, violetts=violett, gruens=gruen;$/;"	v
tuerweitern	DB.cpp	/^uchar DB::tuerweitern(const string& tabs, const string& feld,long wlength,const size_t aktc,int obverb) const$/;"	f	class:DB
tuloeschen	kons.cpp	/^int tuloeschen(const string& zuloe,const string& cuser\/*=nix*\/, int obverb\/*=0*\/, int oblog\/*=0*\/,stringstream *ausgp\/*=0*\/)$/;"	f
typ	DB.h	/^    const string typ;$/;"	m	class:Feld
typ	DB.h	/^    vector<string> typ;$/;"	m	class:RS
typ	kons.h	/^  string typ;$/;"	m	class:find2cl
typbit	kons.h	/^    int typbit;$/;"	m	class:find3cl
typbitp	kons.cpp	/^int *find3cl::typbitp;$/;"	m	class:find3cl	file:
typbitp	kons.h	/^    static int *typbitp;$/;"	m	class:find3cl
uchar	DB.h	/^typedef unsigned char	uchar;	\/* Short for unsigned char *\/$/;"	t
uchar	kons.h	/^typedef unsigned char uchar; \/\/ 1 Byte$/;"	t
udpr	kons.h	/^ string udpr;   \/\/ Befehl zum direkten Deinstallieren$/;"	m	class:linst_cl
uebersichtlich	kons.cpp	5956;"	d	file:
ull	kons.h	/^typedef unsigned long long ull;$/;"	t
umgek	kons.cpp	/^      *const tuerkis="\\e[0;36m", *const htuerkis="\\e[1;36m", *const hgrau="\\e[0;37m", *const weiss="\\e[1;37m", *const umgek="\\e[7m";$/;"	v
unindt	kons.cpp	/^const string& unindt=instvz+"\/uninstallinv"; \/\/ # Name muss identisch sein mit Variabler UNF in install.sh$/;"	v
unsig	DB.h	/^		bool unsig;$/;"	m	class:Feld
untersuser	kons.cpp	/^int untersuser(const string& uname,__uid_t *uidp\/*=0*\/, __gid_t *gidp\/*=0*\/,vector<gid_t> *gids\/*=0*\/,struct passwd* ustr\/*=0*\/)$/;"	f
upd	kons.h	/^ string upd;    \/\/ Befehl zum Systemupdate$/;"	m	class:linst_cl
update	kons.cpp	/^void hcl::update(const string& DPROG)$/;"	f	class:hcl
upr	kons.h	/^ string upr;   \/\/ Befehl zum Deinstallieren ueber das Installationssystem$/;"	m	class:linst_cl
urp	kons.h	/^enum instprog {keinp,zypper,apt,dnf,yum,urp,pac};$/;"	e	enum:instprog
usedb	DB.cpp	/^int DB::usedb(const string& db,const size_t aktc\/*=0*\/)$/;"	f	class:DB
user	DB.h	/^    const string user;$/;"	m	class:DB
usr_lib64_vz	kons.h	/^		string usr_lib64_vz;$/;"	m	class:lsyscl
usys	kons.h	/^enum lsysen:uchar {usys,sus,deb,fed};$/;"	e	enum:lsysen
uypr	kons.h	/^ string uypr;   \/\/ Befehl zum Deinstallieren ueber das Installationssystem ohne Rueckfrage$/;"	m	class:linst_cl
vagenau	kons.cpp	1115;"	d	file:
val	kons.h	/^    char val[100];$/;"	m	class:Schluessel
vector_incl	kons.h	32;"	d
verarbeit	kons.cpp	/^int find3cl::verarbeit(const char *fpath, const struct stat *sb, int tflag, struct FTW *ftwbuf)$/;"	f	class:find3cl
verarbeitkonf	kons.cpp	/^void hcl::verarbeitkonf()$/;"	f	class:hcl
versnr	kons.cpp	/^const double& versnr=$/;"	v
verszuzahl	kons.cpp	/^double verszuzahl(const string& vers)$/;"	f
verzneu	kons.h	/^  int eingefuegt, verzneu;$/;"	m	class:find2cl
viadd	kons.cpp	/^void viadd(string* cmdp,const string& datei,const uchar ro\/*=0*\/,const uchar hinten\/*=0*\/, const uchar unten\/*=0*\/)$/;"	f
violett	kons.cpp	/^			*const dblau="\\e[0;34;1;47m", *const blau="\\e[1;34m", *const violett="\\e[0;35m", *const hviolett="\\e[1;35m",$/;"	v
violetts	kons.cpp	/^const string drots=drot, rots=rot, schwarzs=schwarz, blaus=blau, dblaus=dblau, gelbs=gelb, tuerkiss=tuerkis, violetts=violett, gruens=gruen;$/;"	v
vischluss	kons.cpp	/^void hcl::vischluss(string& erg)$/;"	f	class:hcl
vonwo	kons.h	/^ string vonwo;$/;"	m	class:perfcl
vorcm	kons.h	/^		string vorcm; \/\/ Vor-Cron-Minuten$/;"	m	class:hcl
vtz	kons.h	23;"	d
vtz	kons.h	26;"	d
vtzs	kons.h	24;"	d
vtzs	kons.h	27;"	d
vznp	kons.h	/^  set<string> *vznp=0; $/;"	m	class:find2cl
wahr	kons.h	/^enum binaer:uchar {falsch,wahr};$/;"	e	enum:binaer
wait	kons.cpp	/^inline void wait () $/;"	f
wartaufpids	kons.cpp	/^int wartaufpids(pidvec *pidv,const ulong runden\/*=0*\/,const int obverb\/*=0*\/,const int oblog\/*=0*\/,const string& wo\/*=nix*\/)$/;"	f
weisezu	DB.cpp	/^void RS::weisezu(const DB* pdb) $/;"	f	class:RS
weiss	kons.cpp	/^      *const tuerkis="\\e[0;36m", *const htuerkis="\\e[1;36m", *const hgrau="\\e[0;37m", *const weiss="\\e[1;37m", *const umgek="\\e[7m";$/;"	v
weiszu	kons.cpp	/^void find2cl::weiszu()$/;"	f	class:find2cl
wele	kons.h	/^    wele(const string& pfad=nix, const long& maxd=-1):pfad(pfad),maxd(maxd){}$/;"	f	class:wele
wele	kons.h	/^class wele$/;"	c
wert	DB.h	/^    string wert;$/;"	m	class:instyp
wert	kons.h	/^    int wert; \/\/ Wert, der pptr zugewiesen wird, falls dieser Parameter gewaehlt wird$/;"	m	class:optioncl
wert	kons.h	/^    int wert; \/\/ Wert, der pptr zugewiesen wird, falls dieser Parameter gewaehlt wird; 0= Wert steht im nÃ¤chsten Parameter$/;"	m	class:optcl
wert	kons.h	/^    string wert;$/;"	m	class:cppSchluess
wert	kons.h	/^   string wert;$/;"	m	class:abSchl
wi	kons.h	/^		uchar wi=0; \/\/ Wichtigkeit: 1= wird mit -lh oder -h, 0= nur mit -lh, 255 (-1) = gar nicht angezeigt$/;"	m	class:optcl
wi	kons.h	/^		uchar wi=0; \/\/ Wichtigkeit: 1= wird mit -lh oder -h, 0= nur mit -lh, 255 (-1) = gar nicht angezeigt$/;"	m	class:optioncl
wurz	kons.h	/^    set<wele> wurz,fertige;$/;"	m	class:find3cl
wurzp	kons.cpp	/^set<wele> *find3cl::wurzp;$/;"	m	class:find3cl	file:
wurzp	kons.h	/^    static set<wele> *wurzp;$/;"	m	class:find3cl
xargspf	kons.h	/^ string xargspf; \/\/ Pfad zu xargs$/;"	m	class:linst_cl
yum	kons.h	/^enum instprog {keinp,zypper,apt,dnf,yum,urp,pac};$/;"	e	enum:instprog
zahlin	kons.cpp	/^size_t zahlin(const string *const str, const char* const was) $/;"	f
zcnfA	kons.h	/^		schlArr zcnfA; \/\/ Zaehlkonfiguration$/;"	m	class:hcl
zeighilfe	kons.cpp	/^int hcl::zeighilfe(const stringstream *const erkl)$/;"	f	class:hcl
zeigkonf	kons.cpp	/^void hcl::zeigkonf()$/;"	f	class:hcl
zeigueberschrift	cl.cpp	/^void hhcl::zeigueberschrift()$/;"	f	class:hhcl
zeigvers	kons.h	/^    uchar zeigvers=0;  \/\/ Version anzeigen$/;"	m	class:hcl
zeigversion	kons.cpp	/^void hcl::zeigversion(const string& ltiffv\/*=nix*\/)$/;"	f	class:hcl
ziehraus	kons.cpp	/^void linst_cl::ziehraus(svec srueck, string *ustringp)$/;"	f	class:linst_cl
zn	kons.h	/^    svec zn;$/;"	m	class:confdat
zp0	kons.h	/^ clock_t zp0, zp1, zp1alt;$/;"	m	class:perfcl
zp1	kons.h	/^ clock_t zp0, zp1, zp1alt;$/;"	m	class:perfcl
zp1alt	kons.h	/^ clock_t zp0, zp1, zp1alt;$/;"	m	class:perfcl
zptr	kons.h	/^    string *zptr=0; \/\/ Zeiger auf Zusatzparameter, der hier eingegeben werden kann (z.B. Zahl der Zeilen nach -n (Zeilenzahl)$/;"	m	class:optioncl
zt	kons.h	/^		const time_t zt;$/;"	m	class:ztacl
ztacl	kons.h	/^		explicit ztacl(time_t &pzt,const char* pfmt):zt(pzt),fmt(pfmt) {$/;"	f	class:ztacl
ztacl	kons.h	/^class ztacl {$/;"	c
zuloeschen	kons.h	/^  int zuloeschen=1;$/;"	m	class:find2cl
zustr	kons.h	/^inline string zustr(int _Val) $/;"	f
zuvec	kons.cpp	/^void find2cl::zuvec(svec *zu,uchar anteil\/*=0*\/)$/;"	f	class:find2cl
zuvec	kons.cpp	/^void find3cl::zuvec(svec *zu,uchar anteil\/*=0*\/)$/;"	f	class:find3cl
zypper	kons.h	/^enum instprog {keinp,zypper,apt,dnf,yum,urp,pac};$/;"	e	enum:instprog
~DB	DB.cpp	/^DB::~DB(void)$/;"	f	class:DB
~RS	DB.cpp	/^RS::~RS() $/;"	f	class:RS
~find2cl	kons.cpp	/^find2cl::~find2cl()$/;"	f	class:find2cl
~hcl	kons.cpp	/^hcl::~hcl()$/;"	f	class:hcl
~hhcl	cl.cpp	/^hhcl::~hhcl()$/;"	f	class:hhcl
~schlArr	kons.cpp	/^schlArr::~schlArr()$/;"	f	class:schlArr
